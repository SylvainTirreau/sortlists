(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();const t=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))},n=function(e){return new this((function(t,n){if(!e||void 0===e.length)return n(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var i=Array.prototype.slice.call(e);if(0===i.length)return t([]);var r=i.length;function o(e,n){if(n&&("object"==typeof n||"function"==typeof n)){var l=n.then;if("function"==typeof l)return void l.call(n,(function(t){o(e,t)}),(function(n){i[e]={status:"rejected",reason:n},0==--r&&t(i)}))}i[e]={status:"fulfilled",value:n},0==--r&&t(i)}for(var l=0;l<i.length;l++)o(l,i[l])}))};var i=setTimeout;function r(e){return Boolean(e&&void 0!==e.length)}function o(){}function l(e){if(!(this instanceof l))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],f(e,this)}function s(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,l._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var i;try{i=n(e._value)}catch(e){return void u(t.promise,e)}a(t.promise,i)}else(1===e._state?a:u)(t.promise,e._value)}))):e._deferreds.push(t)}function a(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof l)return e._state=3,e._value=t,void c(e);if("function"==typeof n)return void f((i=n,r=t,function(){i.apply(r,arguments)}),e)}e._state=1,e._value=t,c(e)}catch(t){u(e,t)}var i,r}function u(e,t){e._state=2,e._value=t,c(e)}function c(e){2===e._state&&0===e._deferreds.length&&l._immediateFn((function(){e._handled||l._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)s(e,e._deferreds[t]);e._deferreds=null}function d(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function f(e,t){var n=!1;try{e((function(e){n||(n=!0,a(t,e))}),(function(e){n||(n=!0,u(t,e))}))}catch(e){if(n)return;n=!0,u(t,e)}}l.prototype.catch=function(e){return this.then(null,e)},l.prototype.then=function(e,t){var n=new this.constructor(o);return s(this,new d(e,t,n)),n},l.prototype.finally=t,l.all=function(e){return new l((function(t,n){if(!r(e))return n(new TypeError("Promise.all accepts an array"));var i=Array.prototype.slice.call(e);if(0===i.length)return t([]);var o=i.length;function l(e,r){try{if(r&&("object"==typeof r||"function"==typeof r)){var s=r.then;if("function"==typeof s)return void s.call(r,(function(t){l(e,t)}),n)}i[e]=r,0==--o&&t(i)}catch(e){n(e)}}for(var s=0;s<i.length;s++)l(s,i[s])}))},l.allSettled=n,l.resolve=function(e){return e&&"object"==typeof e&&e.constructor===l?e:new l((function(t){t(e)}))},l.reject=function(e){return new l((function(t,n){n(e)}))},l.race=function(e){return new l((function(t,n){if(!r(e))return n(new TypeError("Promise.race accepts an array"));for(var i=0,o=e.length;i<o;i++)l.resolve(e[i]).then(t,n)}))},l._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){i(e,0)},l._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};const p=l;var h=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e.g)return e.g;throw new Error("unable to locate global object")}();"function"!=typeof h.Promise?h.Promise=p:(h.Promise.prototype.finally||(h.Promise.prototype.finally=t),h.Promise.allSettled||(h.Promise.allSettled=n));var v={languageSelector:document.getElementById("prtz-language"),siteName:document.getElementById("site-name")},m={fr:{"create-list":"nouvelle liste","open-list":"charger une liste","site-slogan":"établir des priorités simplement",help:"aide","compute-list":"commencer","new-list-tip-1":"entrez les éléments à prioriser ci-dessus (un élément par ligne) :",confirm:"confirmer",cancel:"annuler","list-opened":"une liste est en cours de calcul. Si vous quittez maintenant, vous perdrez cette liste. Perdre la liste ?","compute-list-tip":"choisissez l'élément le plus important des deux :","compute-list-result":"voici votre liste triée :","real-time":"temps réel","estimated-time":"temps estimé","time-left":"temps restant","versions-header":"versions","versions-txt":"<p><b>version 1.1</b> (mai 2022) : première version ne contenant que la possibilité de calculer une liste de priorités.</p><p><b>version 1.2.</b> (non sortie) : ajout de la possibilité de sauvegarder des listes sur l'ordinateur de l'utilisatrice ou de l'utilisateur.</p><p><b>version 1.3</b> (non sortie) : ajout de la possibilité de sauvegarder des listes sur les serveurs de sortlists avec un compte utilisateur.</p>","features-header":"fonctionnalités prévues","features-txt":"<p>Sauvegarder une liste en cours</p><p>Charger une liste sauvegardée.</p>","contact-mail-title":"Envoyer un mail","contact-mail-txt":"<p>N'hésitez pas à envoyer un mail pour :<ul><li>proposer une traduction dans une langue qui n'existe pas;</li><li>proposer des corrections;</li><li>signaler un bug (préférez néanmoins le <a href='https://github.com/SylvainTirreau/prioritizer-webapp/issues' target='_blank'>dépôt github du projet</a> pour signaler un bug);</li><li>proposer une fonctionnalité;</li><li>tout autre chose qui vous passe par la tête...</li></ul></p><p>Quand vous cliquerez sur le bouton ci-dessous, un nouveau mail s'ouvrira dans votre logiciel de messagerie habituel. Veuillez patienter que la fenêtre se charge...</p>","send-mail":"Envoyer un email"},en:{"create-list":"new list","open-list":"load list","site-slogan":"simply prioritize",help:"help","compute-list":"start","new-list-tip-1":"Enter items to prioritize below (one item per line):",confirm:"confirm",cancel:"cancel","list-opened":"a list is current computing. If you quit now, you will lost this list. Do you really want to quit?","compute-list-tip":"choose the most important item:","compute-list-result":"here is your sorted list:","real-time":"real time","estimated-time":"estimated time","time-left":"time left","versions-header":"versions","versions-txt":"<p><b>version 1.1</b> (may 2022) : first version containing only the possibility of computing a list of priorities.</p><p><b>version 1.2</b> (not released) : add the possibility to save a list on the user's computer.</p><p><b>version 1.1</b> (not released) : Add the possibility to save a list on the sortlists servers with a user account.</p>","features-header":"planned features","features-txt":"<p>Save a current list</p><p>Load a saved list.</p>","contact-mail-title":"Send an e-mail","contact-mail-txt":"<p>Feel free to send an e-mail to:<ul><li>propose a translation in a language that does not exist;</li><li>propose corrections;</li><li>report a bug (prefer <a href='https://github.com/SylvainTirreau/prioritizer-webapp/issues' target='_blank'>the project's github repository</a> to report a bug);</li><li>propose a feature;</li><li>anything else that comes to mind...</li></ul></p><p>When you click on the button below, a new email will open in you usual email app. Please wait for the window to load...</p>","send-mail":"Send an e-mail"}},y=function(e){void 0===e&&(e=v.languageSelector.value),document.documentElement.lang=e,v.languageSelector.value!=e&&(v.languageSelector.value=e)},g=function(e){void 0===e&&(e=v.languageSelector.value);var t=document.getElementsByClassName("prtz-i18n");Array.from(t).forEach((function(t){t.innerHTML=m[e][t.id.split("i18n-")[1]]}))},b=function(e){var t=new Date(null);t.setSeconds(e);var n=t.toISOString().substring(11,19).split(":");return n[0]+"h "+n[1]+"mn "+n[2]+"s"},w=function(e,t){var n=JSON.stringify(t);return-1==JSON.stringify(e).indexOf(n)},L=function(e){document.querySelectorAll('*[id^="screen-"]').forEach((function(t){"screen-"+e==t.id?t.classList.contains("hide-element")&&t.classList.remove("hide-element"):t.classList.contains("hide-element")||t.classList.add("hide-element")})),v.siteName.dataset.current=e},x=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},C=function(e,t,n,i,r,o,l,s){var a,u;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=null),void 0===o&&(o=null),void 0===l&&(l=null),void 0===s&&(s=null);var c=document.createElement("div");if(null!==e&&(c.id=e),null!==t)try{for(var d=x(t),f=d.next();!f.done;f=d.next()){var p=f.value;c.classList.add(p)}}catch(e){a={error:e}}finally{try{f&&!f.done&&(u=d.return)&&u.call(d)}finally{if(a)throw a.error}}if(null!==n&&(c.style.cssText=n),null!==i)for(var h in i)c.setAttribute("data-"+h,i[h]);return null!==r&&(c.innerHTML=r),null!==r&&(c.innerHTML=r),null!==o&&(c.innerText=o),null!=l&&("true"==l?c.contentEditable="true":"false"==l&&(c.contentEditable="false")),null!==s&&c.appendChild(s),c},T=function(e,t,n,i,r,o,l,s){var a,u;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=null),void 0===o&&(o=null),void 0===l&&(l=null),void 0===s&&(s=null);var c=document.createElement("button");if(null!==e&&(c.id=e),null!==t)try{for(var d=x(t),f=d.next();!f.done;f=d.next()){var p=f.value;c.classList.add(p)}}catch(e){a={error:e}}finally{try{f&&!f.done&&(u=d.return)&&u.call(d)}finally{if(a)throw a.error}}if(null!==n&&(c.style.cssText=n),null!==i)for(var h in i)c.setAttribute("data-"+h,i[h]);return null!==r&&(c.title=r),null!==o&&(c.innerHTML=o),null!==o&&(c.innerHTML=o),null!==l&&(c.innerText=l),null!==s&&c.appendChild(s),c},S=function(e,t,n,i,r,o,l){var s,a;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=null),void 0===o&&(o=null),void 0===l&&(l=null);var u=document.createElement("p");if(null!==e&&(u.id=e),null!==t)try{for(var c=x(t),d=c.next();!d.done;d=c.next()){var f=d.value;u.classList.add(f)}}catch(e){s={error:e}}finally{try{d&&!d.done&&(a=c.return)&&a.call(c)}finally{if(s)throw s.error}}if(null!==n&&(u.style.cssText=n),null!==i)for(var p in i)u.setAttribute("data-"+p,i[p]);return null!==r&&(u.innerHTML=r),null!==r&&(u.innerHTML=r),null!==o&&(u.innerText=o),null!==l&&u.appendChild(l),u},E={modalText:document.getElementById("modal-text"),modalBtnOk:document.getElementById("modal-btn-ok"),modalBtnCancel:document.getElementById("modal-btn-cancel"),screenModal:document.getElementById("screen-modal")},B=function(){function e(e){var t=this;this.loadText=function(e){var n=new Promise((function(t,n){E.modalText.innerHTML="";var i=function(e,t,n,i,r,o,l){var s,a;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=null),void 0===o&&(o=null),void 0===l&&(l=null);var u=document.createElement("span");if(null!==e&&(u.id=e),null!==t)try{for(var c=x(t),d=c.next();!d.done;d=c.next()){var f=d.value;u.classList.add(f)}}catch(e){s={error:e}}finally{try{d&&!d.done&&(a=c.return)&&a.call(c)}finally{if(s)throw s.error}}if(null!==n&&(u.style.cssText=n),null!==i)for(var p in i)u.setAttribute("data-"+p,i[p]);return null!==r&&(u.innerHTML=r),null!==r&&(u.innerHTML=r),null!==o&&(u.innerText=o),null!==l&&u.appendChild(l),u}("i18n-"+e,["prtz-i18n"]);E.modalText.appendChild(i),t("Text inserted."),n("Text not inserted.")}));n.then((function(){g(),t.eventListenerBtns()}))},this.eventListenerBtns=function(){E.modalBtnOk.addEventListener("click",t.validation,{once:!0}),E.modalBtnCancel.addEventListener("click",t.cancel,{once:!0})},this.validation=function(){E.modalBtnCancel.removeEventListener("click",t.cancel),t.validationValue=!0},this.cancel=function(){E.modalBtnOk.removeEventListener("click",t.cancel),t.validationValue=!1},L("modal"),this.validationValue=null,this.loadText(e)}return e.prototype.waitClick=function(){var e=this;return new Promise((function(t){var n=function(){setTimeout((function(){null==e.validationValue?n():(E.screenModal.classList.add("hide-element"),t(e.validationValue))}),500)};n()}))},e}(),k=function(){function e(){this.eventListenerLanguageSelector(),this.eventListenerSiteName()}return e.prototype.askConfirmation=function(e){return t=this,n=void 0,r=function(){var t,n;return function(e,t){var n,i,r,o,l={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,i=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((r=(r=l.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){l.label=o[1];break}if(6===o[0]&&l.label<r[1]){l.label=r[1],r=o;break}if(r&&l.label<r[2]){l.label=r[2],l.ops.push(o);break}r[2]&&l.ops.pop(),l.trys.pop();continue}o=t.call(e,l)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(i){switch(i.label){case 0:return t=new B("list-opened"),n=e,[4,t.waitClick()];case 1:return n.validationResult=i.sent(),[2,this.validationResult]}}))},new((i=void 0)||(i=Promise))((function(e,o){function l(e){try{a(r.next(e))}catch(e){o(e)}}function s(e){try{a(r.throw(e))}catch(e){o(e)}}function a(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(l,s)}a((r=r.apply(t,n||[])).next())}));var t,n,i,r},e.prototype.eventListenerSiteName=function(){var e=this;v.siteName.addEventListener("click",(function(t){t.target instanceof HTMLHeadingElement&&("compute-list"==t.target.dataset.current?e.askConfirmation(e).then((function(){e.validationResult?L("home"):L("compute-list")})):(t.target.dataset.current,L("home")))}))},e.prototype.eventListenerLanguageSelector=function(){v.languageSelector.addEventListener("change",(function(){y(this.value),g(this.value)}))},e}(),I={changelogLink:document.getElementById("changelog-link"),contactIcon:document.getElementById("contact-ico")},_=function(){this.eventListenerChangelog=function(){I.changelogLink.addEventListener("click",(function(e){L("changelog")}))},this.eventListenerContactIcon=function(){I.contactIcon.addEventListener("click",(function(e){L("contact")}))},this.eventListenerChangelog(),this.eventListenerContactIcon()},O={btnCreateList:document.getElementById("btn-create-list"),btnLoadList:document.getElementById("btn-load-list"),btnHelp:document.getElementById("btn-help"),screenHome:document.getElementById("screen-home"),screenComputeList:document.getElementById("screen-compute-list"),screenNewList:document.getElementById("screen-new-list")},j={newList:document.getElementById("new-list"),btnComputeList:document.getElementById("btn-compute-list")},P={combinations:document.getElementById("combinations"),timeLeft:document.getElementById("time-left"),progressBar:document.getElementById("progress"),computeListTip:document.getElementById("compute-list-tip"),computeListResult:document.getElementById("compute-list-result")},q=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},M=function(){function e(e){var t=this;this.launch=function(){t.generateAllPairs(),t.initQuestions()},this.computeCouples=function(){var e,n;t.couplesToCompute=[];var i=t.questionStep,r=t.questionStep+t.questionIter;try{for(var o=q(function(e,t,n){var i;return void 0===e&&(e=0),void 0===t&&(t=null),void 0===n&&(n=1),function(e,t){var n,i,r,o,l={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,i=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((r=(r=l.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){l.label=o[1];break}if(6===o[0]&&l.label<r[1]){l.label=r[1],r=o;break}if(r&&l.label<r[2]){l.label=r[2],l.ops.push(o);break}r[2]&&l.ops.pop(),l.trys.pop();continue}o=t.call(e,l)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(r){switch(r.label){case 0:null==t&&(t=e,e=0),i=e,r.label=1;case 1:return i<t?[4,i]:[3,4];case 2:r.sent(),r.label=3;case 3:return i+=n,[3,1];case 4:return[2]}}))}(t.questionStep,Object.keys(t.list).length,t.questionIter)),l=o.next();!l.done;l=o.next()){l.value;var s=[i,r];-1==t.pairsComputed.indexOf(s.join("_"))&&r<=Object.keys(t.list).length&&t.couplesToCompute.push(s),i=r,r+=t.questionIter}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}t.questionIter+=1,0==t.couplesToCompute.length&&t.generateCouples()},this.generateCouples=function(){t.questionStep+t.questionIter<=Object.keys(t.list).length?t.computeCouples():t.questionStep!=Object.keys(t.list).length-1&&(t.questionStep+=1,t.questionIter=1,t.computeCouples())},this.initProgressBar=function(){P.progressBar.max=t.allPairs.length/2},this.setProgressValue=function(e){void 0===e&&(e=!1),P.progressBar.value=e?t.allPairs.length/2:t.pairsComputed.length/2},this.initQuestions=function(){var e=new Promise((function(e,n){t.generateCouples(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.initProgressBar()})).then((function(){t.writeButtons()}))},this.writeButtons=function(){var e,n;if(P.combinations.innerHTML="",t.couplesToCompute.length>0){var i=1,r=function(e){var n;n=1==i?"show":"hidden";var r="btn-wrapper-"+i.toString(),o=e.join("_"),l=([e[1],e[0]].join("_"),C(r,["btn-wrapper","d-flex","flex-column",n])),s=C(null,["d-flex","justify-content-center"]),a=C(null,["d-flex","justify-content-center"]),u=T(null,["btn","btn-primary","btn1"],null,{id:e[0],couple:o,iter:i.toString()},null,null,t.list[e[0]]),c=T(null,["btn","btn-primary","btn2"],null,{id:e[1],couple:o,iter:i.toString()},null,null,t.list[e[1]]);u.addEventListener("click",(function(){t.computeChoiceAndLoadNext(u)})),c.addEventListener("click",(function(){t.computeChoiceAndLoadNext(c)})),s.appendChild(u),a.appendChild(c),l.appendChild(s),l.appendChild(a),P.combinations.appendChild(l),i+=1};try{for(var o=q(t.couplesToCompute),l=o.next();!l.done;l=o.next())r(l.value)}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}}else t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2==0?t.computePriorities():console.error("Il ne devrait pas rester des paires non calculées. Or, il en reste",t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2)},this.computeAndWriteTimeLeft=function(){var e=new Promise((function(e,n){t.computeTimeLeft(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.writeTimeLeft()}))},this.computeTimeLeft=function(){var e=t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2*5;t.firstComputing&&(t.startDate=new Date,t.estimatedSeconds=e,t.firstComputing=!1),t.timeleft=b(e)},this.writeTimeLeft=function(e){void 0===e&&(e=!1);var n=new Promise((function(n,i){if(e){var r=new Date-t.startDate;r/=1e3,P.timeLeft.innerHTML="<span id='i18n-real-time' class='prtz-i18n' style='font-weight: bold'></span><span> : "+b(Math.round(r))+"</span><br>",P.timeLeft.innerHTML+="<span id='i18n-estimated-time' class='prtz-i18n' style='font-weight: bold'></span><span> : "+b(t.estimatedSeconds)+"</span>"}else P.timeLeft.innerHTML="<span id='i18n-time-left' class='prtz-i18n' style='font-weight: bold'></span><span> : "+t.timeleft+"</span>";n("Time left written."),i("Time left not written.")}));n.then((function(){g()}))},this.computeChoiceAndLoadNext=function(e){var n=new Promise((function(n,i){var r=e.dataset.couple.split("_"),o=[r[1],r[0]].join("_");t.recordChoice(e.dataset.couple,o,e.dataset.id),n("Couples generated."),i("Couples not generated.")}));n.then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1?t.showNextCouple(e):t.computeAndLoadNextStep()})).then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1&&t.applyTransitivity()})).then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1&&t.setProgressValue()})).then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1&&t.computeAndWriteTimeLeft()}))},this.recordChoice=function(e,n,i){var r=e.split("_");r[0]==i?t.pairSequences.push([r[0],r[1]]):t.pairSequences.push([r[1],r[0]]),-1==t.pairsComputed.indexOf(e)&&t.pairsComputed.push(e),-1==t.pairsComputed.indexOf(n)&&t.pairsComputed.push(n)},this.computeAndLoadNextStep=function(){var e=new Promise((function(e,n){t.applyTransitivity(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.initQuestions()}))},this.hasTransitivity=function(){var e,n,i,r;try{for(var o=q(t.pairSequences),l=o.next();!l.done;l=o.next()){var s=l.value;try{for(var a=(i=void 0,q(t.pairSequences)),u=a.next();!u.done;u=a.next()){var c=u.value;if(c!=s&&s[1]==c[0]&&w(t.pairSequences,[s[0],c[1]]))return!0}}catch(e){i={error:e}}finally{try{u&&!u.done&&(r=a.return)&&r.call(a)}finally{if(i)throw i.error}}}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return!1},this.computeTransitiveElements=function(e){var n,i;try{for(var r=q(t.pairSequences),o=r.next();!o.done;o=r.next()){var l=o.value;if(l!=e&&e[1]==l[0]){var s=e[0]+"_"+l[1],a=l[1]+"_"+e[0];-1==t.pairsComputed.indexOf(s)&&t.pairsComputed.push(s),-1==t.pairsComputed.indexOf(a)&&t.pairsComputed.push(a),w(t.pairSequences,[e[0],l[1]])&&t.pairSequences.push([e[0],l[1]])}}}catch(e){n={error:e}}finally{try{o&&!o.done&&(i=r.return)&&i.call(r)}finally{if(n)throw n.error}}},this.applyTransitivity=function(){var e,n;if(t.hasTransitivity()){var i=JSON.parse(JSON.stringify(t.pairSequences));try{for(var r=q(i),o=r.next();!o.done;o=r.next()){var l=o.value;t.computeTransitiveElements(l)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}t.applyTransitivity()}},this.computePriorities=function(){var e=new Promise((function(e,n){t.sortResults(),e("Results sorted."),n("Results not sorted.")}));e.then((function(){t.getLoosers()})).then((function(){t.comfortLooser()})).then((function(){t.hasDuplicate()?console.warn("Finally there is duplicates. Fix it."):t.writeResults()}))},this.hasDuplicate=function(){var e=[];for(var n in t.results){if(-1!=e.indexOf(t.results[n]))return!0;e.push(t.results[n])}return!1},this.sortResults=function(){var e,n;try{for(var i=q(t.pairSequences),r=i.next();!r.done;r=i.next()){var o=r.value;-1==Object.keys(t.results).indexOf(o[0])?t.results[o[0]]=1:t.results[o[0]]+=1}}catch(t){e={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},this.writeResults=function(){var e,n,i=Object.entries(t.results).sort((function(e,t){return t[1]-e[1]})),r=1;P.combinations.innerHTML="";try{for(var o=q(i),l=o.next();!l.done;l=o.next()){var s=l.value,a=S(null,null,null,null,null,r.toString()+" - "+t.list[s[0].toString()]);P.combinations.appendChild(a),r+=1}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}t.setProgressValue(!0),t.writeTimeLeft(!0),P.computeListTip.classList.add("hide-element"),P.computeListResult.classList.remove("hide-element")},this.comfortLooser=function(){var e,n;if(t.loosers.length>0)try{for(var i=q(t.loosers),r=i.next();!r.done;r=i.next()){var o=r.value;t.results[o]=0}}catch(t){e={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},this.getLoosers=function(){if(Object.keys(t.list).length>Object.keys(t.results).length)for(var e in t.list)-1==Object.keys(t.results).indexOf(e)&&t.loosers.push(e)},this.list=e,this.pairsComputed=[],this.pairsTransitivityApplied=[],this.couplesToCompute=[],this.pairSequences=[],this.finalSequences=[],this.allPairs=[],this.questionStep=1,this.questionIter=1,this.results={},this.loosers=[],this.estimatedSeconds=0,this.firstComputing=!0,P.timeLeft.innerHTML=""}return e.prototype.generateAllPairs=function(){var e,t,n,i=(n=Object.keys(this.list)).flatMap((function(e){return n.flatMap((function(t){return e!=t?[[e,t]]:[]}))}));try{for(var r=q(i),o=r.next();!o.done;o=r.next()){var l=o.value.join("_");this.allPairs.push(l)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}},e.prototype.showNextCouple=function(e){var t=parseInt(e.dataset.iter),n=t+1,i=document.getElementById("btn-wrapper-"+t.toString()),r=document.getElementById("btn-wrapper-"+n.toString());i.classList.remove("show"),i.classList.add("hidden"),r.classList.remove("hidden"),r.classList.add("show")},e}(),H=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},N=function(){var e=this;this.eventListenerOutsideTextarea=function(t){j.newList.contains(t.target)||e.disableTextarea()},this.disableTextarea=function(){j.newList.classList.add("inactive"),j.newList.blur(),j.newList.readOnly=!0,window.removeEventListener("click",e.eventListenerOutsideTextarea)},this.eventListenerTextarea=function(){j.newList.addEventListener("dblclick",(function(t){j.newList.classList.contains("inactive")?(j.newList.classList.remove("inactive"),j.newList.readOnly=!1,window.addEventListener("click",e.eventListenerOutsideTextarea)):e.disableTextarea()})),j.newList.addEventListener("input",(function(t){var n,i,r=!1,o=j.newList.value,l=o.split("\n");try{for(var s=H(l),a=s.next();!a.done;a=s.next())""==a.value&&(r=!0)}catch(e){n={error:e}}finally{try{a&&!a.done&&(i=s.return)&&i.call(s)}finally{if(n)throw n.error}}-1!=o.indexOf("\n")&&!r&&l.length>=3?(j.btnComputeList.disabled=!1,j.btnComputeList.addEventListener("click",e.eventListenerComputeBtn)):(j.btnComputeList.disabled=!0,j.btnComputeList.removeEventListener("click",e.eventListenerComputeBtn))}))},this.buildList=function(){var e,t;if(-1!=j.newList.value.indexOf("\n")){var n=j.newList.value.split("\n"),i={},r=1;try{for(var o=H(n),l=o.next();!l.done;l=o.next()){var s=l.value;""!=s&&(i[r.toString()]=s,r+=1)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}return i}return console.error("Il n'y a pas de saut de ligne détecté !"),null},this.eventListenerComputeBtn=function(t){var n;L("compute-list");var i=new Promise((function(t,i){n=e.buildList(),t("List built."),i("List not built.")}));i.then((function(){new M(n).launch()}))},j.newList.value="",this.eventListenerTextarea()},z=function(){this.eventListenerNewList=function(){O.btnCreateList.addEventListener("click",(function(){new N,L("new-list")}))},this.eventListenerNewList()},A={changelogClose:document.getElementById("changelog-close")},R=function(){this.eventListenerCloseBtn=function(){A.changelogClose.addEventListener("click",(function(){L("home")}))},this.eventListenerCloseBtn()},F={contactClose:document.getElementById("contact-close"),sendMailBtn:document.getElementById("send-mail-btn")},D=function(){this.eventListenerSendMail=function(){F.sendMailBtn.addEventListener("click",(function(){var e;e=atob("c3lsdmFpbkBzb3J0bGlzdHMuYXBw"),window.location.href="mailto:"+e}))},this.eventListenerCloseBtn=function(){F.contactClose.addEventListener("click",(function(){L("home")}))},this.eventListenerSendMail(),this.eventListenerCloseBtn()};window.addEventListener("DOMContentLoaded",(function(e){(new J).start()}));var V=window.navigator,J=function(){function e(){this.header=new k,this.footer=new _,this.home=new z,this.changelog=new R,this.contact=new D;var e=V.userLanguage||window.navigator.language;this.userLanguage=e.split("-")[0]}return e.prototype.start=function(){-1!=Object.keys(m).indexOf(this.userLanguage)?y(this.userLanguage):y(),g()},e}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,