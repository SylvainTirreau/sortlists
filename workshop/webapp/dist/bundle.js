(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();const t=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))},n=function(e){return new this((function(t,n){if(!e||void 0===e.length)return n(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var i=Array.prototype.slice.call(e);if(0===i.length)return t([]);var r=i.length;function o(e,n){if(n&&("object"==typeof n||"function"==typeof n)){var l=n.then;if("function"==typeof l)return void l.call(n,(function(t){o(e,t)}),(function(n){i[e]={status:"rejected",reason:n},0==--r&&t(i)}))}i[e]={status:"fulfilled",value:n},0==--r&&t(i)}for(var l=0;l<i.length;l++)o(l,i[l])}))};var i=setTimeout;function r(e){return Boolean(e&&void 0!==e.length)}function o(){}function l(e){if(!(this instanceof l))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],f(e,this)}function a(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,l._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var i;try{i=n(e._value)}catch(e){return void u(t.promise,e)}s(t.promise,i)}else(1===e._state?s:u)(t.promise,e._value)}))):e._deferreds.push(t)}function s(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof l)return e._state=3,e._value=t,void c(e);if("function"==typeof n)return void f((i=n,r=t,function(){i.apply(r,arguments)}),e)}e._state=1,e._value=t,c(e)}catch(t){u(e,t)}var i,r}function u(e,t){e._state=2,e._value=t,c(e)}function c(e){2===e._state&&0===e._deferreds.length&&l._immediateFn((function(){e._handled||l._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)a(e,e._deferreds[t]);e._deferreds=null}function d(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function f(e,t){var n=!1;try{e((function(e){n||(n=!0,s(t,e))}),(function(e){n||(n=!0,u(t,e))}))}catch(e){if(n)return;n=!0,u(t,e)}}l.prototype.catch=function(e){return this.then(null,e)},l.prototype.then=function(e,t){var n=new this.constructor(o);return a(this,new d(e,t,n)),n},l.prototype.finally=t,l.all=function(e){return new l((function(t,n){if(!r(e))return n(new TypeError("Promise.all accepts an array"));var i=Array.prototype.slice.call(e);if(0===i.length)return t([]);var o=i.length;function l(e,r){try{if(r&&("object"==typeof r||"function"==typeof r)){var a=r.then;if("function"==typeof a)return void a.call(r,(function(t){l(e,t)}),n)}i[e]=r,0==--o&&t(i)}catch(e){n(e)}}for(var a=0;a<i.length;a++)l(a,i[a])}))},l.allSettled=n,l.resolve=function(e){return e&&"object"==typeof e&&e.constructor===l?e:new l((function(t){t(e)}))},l.reject=function(e){return new l((function(t,n){n(e)}))},l.race=function(e){return new l((function(t,n){if(!r(e))return n(new TypeError("Promise.race accepts an array"));for(var i=0,o=e.length;i<o;i++)l.resolve(e[i]).then(t,n)}))},l._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){i(e,0)},l._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};const p=l;var m=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e.g)return e.g;throw new Error("unable to locate global object")}();"function"!=typeof m.Promise?m.Promise=p:(m.Promise.prototype.finally||(m.Promise.prototype.finally=t),m.Promise.allSettled||(m.Promise.allSettled=n));var h={languageSelector:document.getElementById("prtz-language"),siteName:document.getElementById("site-name")},v={fr:{"create-list":"nouvelle liste","open-list":"charger une liste","site-slogan":"établir des priorités simplement",help:"aide","compute-list":"commencer","new-list-tip-1":"entrez les éléments à prioriser ci-dessus (un élément par ligne) :",confirm:"confirmer",cancel:"annuler","list-opened":"une liste est en cours de calcul. Si vous quittez maintenant, vous perdrez cette liste. Perdre la liste ?","compute-list-tip":"choisissez l'élément le plus important des deux :","compute-list-result":"voici votre liste triée :","real-time":"temps réel","estimated-time":"temps estimé","time-left":"temps restant"},en:{"create-list":"new list","open-list":"load list","site-slogan":"simply prioritize",help:"help","compute-list":"start","new-list-tip-1":"Enter items to prioritize below (one item per line):",confirm:"confirm",cancel:"cancel","list-opened":"a list is current computing. If you quit now, you will lost this list. Do you really want to quit?","compute-list-tip":"choose the most important item:","compute-list-result":"here is your sorted list:","real-time":"real time","estimated-time":"estimated time","time-left":"time left"}},y=function(e){void 0===e&&(e=h.languageSelector.value),document.documentElement.lang=e},g=function(e){void 0===e&&(e=h.languageSelector.value);var t=document.getElementsByClassName("prtz-i18n");Array.from(t).forEach((function(t){t.innerHTML=v[e][t.id.split("i18n-")[1]]}))},w={newList:document.getElementById("new-list"),btnComputeList:document.getElementById("btn-compute-list")},b=function(e){var t=new Date(null);t.setSeconds(e);var n=t.toISOString().substring(11,19).split(":");return n[0]+"h "+n[1]+"mn "+n[2]+"s"},L=function(e,t){var n=JSON.stringify(t);return-1==JSON.stringify(e).indexOf(n)},x=function(e){document.querySelectorAll('*[id^="screen-"]').forEach((function(t){"screen-"+e==t.id?t.classList.contains("hide-element")&&t.classList.remove("hide-element"):t.classList.contains("hide-element")||t.classList.add("hide-element")})),h.siteName.dataset.current=e},T=function(){w.newList.value=""},C=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},S=function(e,t,n,i,r,o,l,a){var s,u;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=null),void 0===o&&(o=null),void 0===l&&(l=null),void 0===a&&(a=null);var c=document.createElement("div");if(null!==e&&(c.id=e),null!==t)try{for(var d=C(t),f=d.next();!f.done;f=d.next()){var p=f.value;c.classList.add(p)}}catch(e){s={error:e}}finally{try{f&&!f.done&&(u=d.return)&&u.call(d)}finally{if(s)throw s.error}}if(null!==n&&(c.style.cssText=n),null!==i)for(var m in i)c.setAttribute("data-"+m,i[m]);return null!==r&&(c.innerHTML=r),null!==r&&(c.innerHTML=r),null!==o&&(c.innerText=o),null!=l&&("true"==l?c.contentEditable="true":"false"==l&&(c.contentEditable="false")),null!==a&&c.appendChild(a),c},E=function(e,t,n,i,r,o,l,a){var s,u;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=null),void 0===o&&(o=null),void 0===l&&(l=null),void 0===a&&(a=null);var c=document.createElement("button");if(null!==e&&(c.id=e),null!==t)try{for(var d=C(t),f=d.next();!f.done;f=d.next()){var p=f.value;c.classList.add(p)}}catch(e){s={error:e}}finally{try{f&&!f.done&&(u=d.return)&&u.call(d)}finally{if(s)throw s.error}}if(null!==n&&(c.style.cssText=n),null!==i)for(var m in i)c.setAttribute("data-"+m,i[m]);return null!==r&&(c.title=r),null!==o&&(c.innerHTML=o),null!==o&&(c.innerHTML=o),null!==l&&(c.innerText=l),null!==a&&c.appendChild(a),c},B=function(e,t,n,i,r,o,l){var a,s;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=null),void 0===o&&(o=null),void 0===l&&(l=null);var u=document.createElement("p");if(null!==e&&(u.id=e),null!==t)try{for(var c=C(t),d=c.next();!d.done;d=c.next()){var f=d.value;u.classList.add(f)}}catch(e){a={error:e}}finally{try{d&&!d.done&&(s=c.return)&&s.call(c)}finally{if(a)throw a.error}}if(null!==n&&(u.style.cssText=n),null!==i)for(var p in i)u.setAttribute("data-"+p,i[p]);return null!==r&&(u.innerHTML=r),null!==r&&(u.innerHTML=r),null!==o&&(u.innerText=o),null!==l&&u.appendChild(l),u},_={modalText:document.getElementById("modal-text"),modalBtnOk:document.getElementById("modal-btn-ok"),modalBtnCancel:document.getElementById("modal-btn-cancel"),screenModal:document.getElementById("screen-modal")},I=function(){function e(e){var t=this;this.loadText=function(e){var n=new Promise((function(t,n){_.modalText.innerHTML="";var i=function(e,t,n,i,r,o,l){var a,s;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===i&&(i=null),void 0===r&&(r=null),void 0===o&&(o=null),void 0===l&&(l=null);var u=document.createElement("span");if(null!==e&&(u.id=e),null!==t)try{for(var c=C(t),d=c.next();!d.done;d=c.next()){var f=d.value;u.classList.add(f)}}catch(e){a={error:e}}finally{try{d&&!d.done&&(s=c.return)&&s.call(c)}finally{if(a)throw a.error}}if(null!==n&&(u.style.cssText=n),null!==i)for(var p in i)u.setAttribute("data-"+p,i[p]);return null!==r&&(u.innerHTML=r),null!==r&&(u.innerHTML=r),null!==o&&(u.innerText=o),null!==l&&u.appendChild(l),u}("i18n-"+e,["prtz-i18n"]);_.modalText.appendChild(i),t("Text inserted."),n("Text not inserted.")}));n.then((function(){g(),t.eventListenerBtns()}))},this.eventListenerBtns=function(){_.modalBtnOk.addEventListener("click",t.validation,{once:!0}),_.modalBtnCancel.addEventListener("click",t.cancel,{once:!0})},this.validation=function(){_.modalBtnCancel.removeEventListener("click",t.cancel),t.validationValue=!0},this.cancel=function(){_.modalBtnOk.removeEventListener("click",t.cancel),t.validationValue=!1},x("modal"),this.validationValue=null,this.loadText(e)}return e.prototype.waitClick=function(){var e=this;return new Promise((function(t){var n=function(){setTimeout((function(){null==e.validationValue?n():(_.screenModal.classList.add("hide-element"),t(e.validationValue))}),500)};n()}))},e}(),O=function(){function e(){this.eventListenerLanguageSelector(),this.eventListenerSiteName()}return e.prototype.askConfirmation=function(e){return t=this,n=void 0,r=function(){var t,n;return function(e,t){var n,i,r,o,l={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,i=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((r=(r=l.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){l.label=o[1];break}if(6===o[0]&&l.label<r[1]){l.label=r[1],r=o;break}if(r&&l.label<r[2]){l.label=r[2],l.ops.push(o);break}r[2]&&l.ops.pop(),l.trys.pop();continue}o=t.call(e,l)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}(this,(function(i){switch(i.label){case 0:return t=new I("list-opened"),n=e,[4,t.waitClick()];case 1:return n.validationResult=i.sent(),[2,this.validationResult]}}))},new((i=void 0)||(i=Promise))((function(e,o){function l(e){try{s(r.next(e))}catch(e){o(e)}}function a(e){try{s(r.throw(e))}catch(e){o(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(l,a)}s((r=r.apply(t,n||[])).next())}));var t,n,i,r},e.prototype.eventListenerSiteName=function(){var e=this;h.siteName.addEventListener("click",(function(t){t.target instanceof HTMLHeadingElement&&("compute-list"==t.target.dataset.current?e.askConfirmation(e).then((function(){T(),e.validationResult?x("home"):x("compute-list")})):"new-list"==t.target.dataset.current?(T(),x("home")):x("home"))}))},e.prototype.eventListenerLanguageSelector=function(){h.languageSelector.addEventListener("change",(function(){y(this.value),g(this.value)}))},e}(),k={btnCreateList:document.getElementById("btn-create-list"),btnLoadList:document.getElementById("btn-load-list"),btnHelp:document.getElementById("btn-help"),screenHome:document.getElementById("screen-home"),screenComputeList:document.getElementById("screen-compute-list"),screenNewList:document.getElementById("screen-new-list")},P=function(){this.eventListenerNewList=function(){k.btnCreateList.addEventListener("click",(function(){x("new-list")}))},this.eventListenerNewList()},j={combinations:document.getElementById("combinations"),timeLeft:document.getElementById("time-left"),progressBar:document.getElementById("progress"),computeListTip:document.getElementById("compute-list-tip"),computeListResult:document.getElementById("compute-list-result")},q=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},M=function(){function e(e){var t=this;this.launch=function(){t.generateAllPairs(),t.initQuestions()},this.computeCouples=function(){var e,n;t.couplesToCompute=[];var i=t.questionStep,r=t.questionStep+t.questionIter;try{for(var o=q(function(e,t,n){var i;return void 0===e&&(e=0),void 0===t&&(t=null),void 0===n&&(n=1),function(e,t){var n,i,r,o,l={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,i=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((r=(r=l.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){l.label=o[1];break}if(6===o[0]&&l.label<r[1]){l.label=r[1],r=o;break}if(r&&l.label<r[2]){l.label=r[2],l.ops.push(o);break}r[2]&&l.ops.pop(),l.trys.pop();continue}o=t.call(e,l)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}(this,(function(r){switch(r.label){case 0:null==t&&(t=e,e=0),i=e,r.label=1;case 1:return i<t?[4,i]:[3,4];case 2:r.sent(),r.label=3;case 3:return i+=n,[3,1];case 4:return[2]}}))}(t.questionStep,Object.keys(t.list).length,t.questionIter)),l=o.next();!l.done;l=o.next()){l.value;var a=[i,r];-1==t.pairsComputed.indexOf(a.join("_"))&&r<=Object.keys(t.list).length&&t.couplesToCompute.push(a),i=r,r+=t.questionIter}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}t.questionIter+=1,0==t.couplesToCompute.length&&t.generateCouples()},this.generateCouples=function(){t.questionStep+t.questionIter<=Object.keys(t.list).length?t.computeCouples():t.questionStep!=Object.keys(t.list).length-1&&(t.questionStep+=1,t.questionIter=1,t.computeCouples())},this.initProgressBar=function(){j.progressBar.max=t.allPairs.length/2},this.setProgressValue=function(e){void 0===e&&(e=!1),j.progressBar.value=e?t.allPairs.length/2:t.pairsComputed.length/2},this.initQuestions=function(){var e=new Promise((function(e,n){t.generateCouples(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.initProgressBar()})).then((function(){t.writeButtons()}))},this.writeButtons=function(){var e,n;if(j.combinations.innerHTML="",t.couplesToCompute.length>0){var i=1,r=function(e){var n;n=1==i?"show":"hidden";var r="btn-wrapper-"+i.toString(),o=e.join("_"),l=([e[1],e[0]].join("_"),S(r,["btn-wrapper","d-flex","flex-column",n])),a=S(null,["d-flex","justify-content-center"]),s=S(null,["d-flex","justify-content-center"]),u=E(null,["btn","btn-primary","btn1"],null,{id:e[0],couple:o,iter:i.toString()},null,null,t.list[e[0]]),c=E(null,["btn","btn-primary","btn2"],null,{id:e[1],couple:o,iter:i.toString()},null,null,t.list[e[1]]);u.addEventListener("click",(function(){t.computeChoiceAndLoadNext(u)})),c.addEventListener("click",(function(){t.computeChoiceAndLoadNext(c)})),a.appendChild(u),s.appendChild(c),l.appendChild(a),l.appendChild(s),j.combinations.appendChild(l),i+=1};try{for(var o=q(t.couplesToCompute),l=o.next();!l.done;l=o.next())r(l.value)}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}}else t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2==0?t.computePriorities():console.error("Il ne devrait pas rester des paires non calculées. Or, il en reste",t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2)},this.computeAndWriteTimeLeft=function(){var e=new Promise((function(e,n){t.computeTimeLeft(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.writeTimeLeft()}))},this.computeTimeLeft=function(){var e=t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2*5;t.firstComputing&&(t.startDate=new Date,t.estimatedSeconds=e,t.firstComputing=!1),t.timeleft=b(e)},this.writeTimeLeft=function(e){void 0===e&&(e=!1);var n=new Promise((function(n,i){if(e){var r=new Date-t.startDate;r/=1e3,j.timeLeft.innerHTML="<span id='i18n-real-time' class='prtz-i18n' style='font-weight: bold'></span><span> : "+b(Math.round(r))+"</span><br>",j.timeLeft.innerHTML+="<span id='i18n-estimated-time' class='prtz-i18n' style='font-weight: bold'></span><span> : "+b(t.estimatedSeconds)+"</span>"}else j.timeLeft.innerHTML="<span id='i18n-time-left' class='prtz-i18n' style='font-weight: bold'></span><span> : "+t.timeleft+"</span>";n("Time left written."),i("Time left not written.")}));n.then((function(){g()}))},this.computeChoiceAndLoadNext=function(e){var n=new Promise((function(n,i){var r=e.dataset.couple.split("_"),o=[r[1],r[0]].join("_");t.recordChoice(e.dataset.couple,o,e.dataset.id),n("Couples generated."),i("Couples not generated.")}));n.then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1?t.showNextCouple(e):t.computeAndLoadNextStep()})).then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1&&t.applyTransitivity()})).then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1&&t.setProgressValue()})).then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1&&t.computeAndWriteTimeLeft()}))},this.recordChoice=function(e,n,i){var r=e.split("_");r[0]==i?t.pairSequences.push([r[0],r[1]]):t.pairSequences.push([r[1],r[0]]),-1==t.pairsComputed.indexOf(e)&&t.pairsComputed.push(e),-1==t.pairsComputed.indexOf(n)&&t.pairsComputed.push(n)},this.computeAndLoadNextStep=function(){var e=new Promise((function(e,n){t.applyTransitivity(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.initQuestions()}))},this.hasTransitivity=function(){var e,n,i,r;try{for(var o=q(t.pairSequences),l=o.next();!l.done;l=o.next()){var a=l.value;try{for(var s=(i=void 0,q(t.pairSequences)),u=s.next();!u.done;u=s.next()){var c=u.value;if(c!=a&&a[1]==c[0]&&L(t.pairSequences,[a[0],c[1]]))return!0}}catch(e){i={error:e}}finally{try{u&&!u.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return!1},this.computeTransitiveElements=function(e){var n,i;try{for(var r=q(t.pairSequences),o=r.next();!o.done;o=r.next()){var l=o.value;if(l!=e&&e[1]==l[0]){var a=e[0]+"_"+l[1],s=l[1]+"_"+e[0];-1==t.pairsComputed.indexOf(a)&&t.pairsComputed.push(a),-1==t.pairsComputed.indexOf(s)&&t.pairsComputed.push(s),L(t.pairSequences,[e[0],l[1]])&&t.pairSequences.push([e[0],l[1]])}}}catch(e){n={error:e}}finally{try{o&&!o.done&&(i=r.return)&&i.call(r)}finally{if(n)throw n.error}}},this.applyTransitivity=function(){var e,n;if(t.hasTransitivity()){var i=JSON.parse(JSON.stringify(t.pairSequences));try{for(var r=q(i),o=r.next();!o.done;o=r.next()){var l=o.value;t.computeTransitiveElements(l)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}t.applyTransitivity()}},this.computePriorities=function(){var e=new Promise((function(e,n){t.sortResults(),e("Results sorted."),n("Results not sorted.")}));e.then((function(){t.getLoosers()})).then((function(){t.comfortLooser()})).then((function(){t.hasDuplicate()?console.warn("Finally there is duplicates. Fix it."):t.writeResults()}))},this.hasDuplicate=function(){var e=[];for(var n in t.results){if(-1!=e.indexOf(t.results[n]))return!0;e.push(t.results[n])}return!1},this.sortResults=function(){var e,n;try{for(var i=q(t.pairSequences),r=i.next();!r.done;r=i.next()){var o=r.value;-1==Object.keys(t.results).indexOf(o[0])?t.results[o[0]]=1:t.results[o[0]]+=1}}catch(t){e={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},this.writeResults=function(){var e,n,i=Object.entries(t.results).sort((function(e,t){return t[1]-e[1]})),r=1;j.combinations.innerHTML="";try{for(var o=q(i),l=o.next();!l.done;l=o.next()){var a=l.value,s=B(null,null,null,null,null,r.toString()+" - "+t.list[a[0].toString()]);j.combinations.appendChild(s),r+=1}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}t.setProgressValue(!0),t.writeTimeLeft(!0),j.computeListTip.classList.add("hide-element"),j.computeListResult.classList.remove("hide-element")},this.comfortLooser=function(){var e,n;if(t.loosers.length>0)try{for(var i=q(t.loosers),r=i.next();!r.done;r=i.next()){var o=r.value;t.results[o]=0}}catch(t){e={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},this.getLoosers=function(){if(Object.keys(t.list).length>Object.keys(t.results).length)for(var e in t.list)-1==Object.keys(t.results).indexOf(e)&&t.loosers.push(e)},this.list=e,this.pairsComputed=[],this.pairsTransitivityApplied=[],this.couplesToCompute=[],this.pairSequences=[],this.finalSequences=[],this.allPairs=[],this.questionStep=1,this.questionIter=1,this.results={},this.loosers=[],this.estimatedSeconds=0,this.firstComputing=!0,j.timeLeft.innerHTML=""}return e.prototype.generateAllPairs=function(){var e,t,n,i=(n=Object.keys(this.list)).flatMap((function(e){return n.flatMap((function(t){return e!=t?[[e,t]]:[]}))}));try{for(var r=q(i),o=r.next();!o.done;o=r.next()){var l=o.value.join("_");this.allPairs.push(l)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}},e.prototype.showNextCouple=function(e){var t=parseInt(e.dataset.iter),n=t+1,i=document.getElementById("btn-wrapper-"+t.toString()),r=document.getElementById("btn-wrapper-"+n.toString());i.classList.remove("show"),i.classList.add("hidden"),r.classList.remove("hidden"),r.classList.add("show")},e}(),H=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},N=function(){var e=this;this.eventListenerOutsideTextarea=function(t){w.newList.contains(t.target)||e.disableTextarea()},this.disableTextarea=function(){w.newList.classList.add("inactive"),w.newList.blur(),w.newList.readOnly=!0,window.removeEventListener("click",e.eventListenerOutsideTextarea)},this.eventListenerTextarea=function(){w.newList.addEventListener("dblclick",(function(t){w.newList.classList.contains("inactive")?(w.newList.classList.remove("inactive"),w.newList.readOnly=!1,window.addEventListener("click",e.eventListenerOutsideTextarea)):e.disableTextarea()})),w.newList.addEventListener("input",(function(t){var n,i,r=!1,o=w.newList.value,l=o.split("\n");try{for(var a=H(l),s=a.next();!s.done;s=a.next())""==s.value&&(r=!0)}catch(e){n={error:e}}finally{try{s&&!s.done&&(i=a.return)&&i.call(a)}finally{if(n)throw n.error}}-1!=o.indexOf("\n")&&!r&&l.length>=3?(w.btnComputeList.disabled=!1,w.btnComputeList.addEventListener("click",e.eventListenerComputeBtn)):(w.btnComputeList.disabled=!0,w.btnComputeList.removeEventListener("click",e.eventListenerComputeBtn))}))},this.buildList=function(){var e,t;if(-1!=w.newList.value.indexOf("\n")){var n=w.newList.value.split("\n"),i={},r=1;try{for(var o=H(n),l=o.next();!l.done;l=o.next()){var a=l.value;""!=a&&(i[r.toString()]=a,r+=1)}}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}return i}return console.error("Il n'y a pas de saut de ligne détecté !"),null},this.eventListenerComputeBtn=function(t){var n;x("compute-list");var i=new Promise((function(t,i){n=e.buildList(),t("List built."),i("List not built.")}));i.then((function(){new M(n).launch()}))},w.newList.value="",this.eventListenerTextarea()};window.addEventListener("DOMContentLoaded",(function(e){(new R).start()}));var A=window.navigator,R=function(){function e(){this.header=new O,this.home=new P,this.userLanguage=A.userLanguage||window.navigator.language,console.log(this.userLanguage),new N}return e.prototype.start=function(){y(),g()},e}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixJQUFJLEVBT1osT0FKSSxZQUFBaEcsTUFBQSxXQUNJekcsSUFDQUcsS0FFUixFQWxCQSxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJpb3JpdGl6ZXItd2ViYXBwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3ByaW9yaXRpemVyLXdlYmFwcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3ByaW9yaXRpemVyLXdlYmFwcC8uL25vZGVfbW9kdWxlcy9wcm9taXNlLXBvbHlmaWxsL3NyYy9maW5hbGx5LmpzIiwid2VicGFjazovL3ByaW9yaXRpemVyLXdlYmFwcC8uL25vZGVfbW9kdWxlcy9wcm9taXNlLXBvbHlmaWxsL3NyYy9hbGxTZXR0bGVkLmpzIiwid2VicGFjazovL3ByaW9yaXRpemVyLXdlYmFwcC8uL25vZGVfbW9kdWxlcy9wcm9taXNlLXBvbHlmaWxsL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmlvcml0aXplci13ZWJhcHAvLi9ub2RlX21vZHVsZXMvcHJvbWlzZS1wb2x5ZmlsbC9zcmMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vcHJpb3JpdGl6ZXItd2ViYXBwLy4vc3JjL3R5cGVzY3JpcHQvaGVhZGVyL2RvbS50cyIsIndlYnBhY2s6Ly9wcmlvcml0aXplci13ZWJhcHAvLi9zcmMvdHlwZXNjcmlwdC9sYW5nL21haW4udHMiLCJ3ZWJwYWNrOi8vcHJpb3JpdGl6ZXItd2ViYXBwLy4vc3JjL3R5cGVzY3JpcHQvbGFuZy90cmFuc2xhdGlvbnMvZnIudHMiLCJ3ZWJwYWNrOi8vcHJpb3JpdGl6ZXItd2ViYXBwLy4vc3JjL3R5cGVzY3JpcHQvbGFuZy90cmFuc2xhdGlvbnMvZW4udHMiLCJ3ZWJwYWNrOi8vcHJpb3JpdGl6ZXItd2ViYXBwLy4vc3JjL3R5cGVzY3JpcHQvbmV3TGlzdC9kb20udHMiLCJ3ZWJwYWNrOi8vcHJpb3JpdGl6ZXItd2ViYXBwLy4vc3JjL3R5cGVzY3JpcHQvY29tbW9ucy91dGlscy50cyIsIndlYnBhY2s6Ly9wcmlvcml0aXplci13ZWJhcHAvLi9zcmMvdHlwZXNjcmlwdC9jb21tb25zL2RvbS50cyIsIndlYnBhY2s6Ly9wcmlvcml0aXplci13ZWJhcHAvLi9zcmMvdHlwZXNjcmlwdC9tb2RhbC9kb20udHMiLCJ3ZWJwYWNrOi8vcHJpb3JpdGl6ZXItd2ViYXBwLy4vc3JjL3R5cGVzY3JpcHQvbW9kYWwvbWFpbi50cyIsIndlYnBhY2s6Ly9wcmlvcml0aXplci13ZWJhcHAvLi9zcmMvdHlwZXNjcmlwdC9oZWFkZXIvbWFpbi50cyIsIndlYnBhY2s6Ly9wcmlvcml0aXplci13ZWJhcHAvLi9zcmMvdHlwZXNjcmlwdC9ob21lL2RvbS50cyIsIndlYnBhY2s6Ly9wcmlvcml0aXplci13ZWJhcHAvLi9zcmMvdHlwZXNjcmlwdC9ob21lL21haW4udHMiLCJ3ZWJwYWNrOi8vcHJpb3JpdGl6ZXItd2ViYXBwLy4vc3JjL3R5cGVzY3JpcHQvY29tcHV0ZUxpc3QvZG9tLnRzIiwid2VicGFjazovL3ByaW9yaXRpemVyLXdlYmFwcC8uL3NyYy90eXBlc2NyaXB0L2NvbXB1dGVMaXN0L21haW4udHMiLCJ3ZWJwYWNrOi8vcHJpb3JpdGl6ZXItd2ViYXBwLy4vc3JjL3R5cGVzY3JpcHQvbmV3TGlzdC9tYWluLnRzIiwid2VicGFjazovL3ByaW9yaXRpemVyLXdlYmFwcC8uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIi8qKlxuICogQHRoaXMge1Byb21pc2V9XG4gKi9cbmZ1bmN0aW9uIGZpbmFsbHlDb25zdHJ1Y3RvcihjYWxsYmFjaykge1xuICB2YXIgY29uc3RydWN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gY29uc3RydWN0b3IucmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZpbmFsbHlDb25zdHJ1Y3RvcjtcbiIsImZ1bmN0aW9uIGFsbFNldHRsZWQoYXJyKSB7XG4gIHZhciBQID0gdGhpcztcbiAgcmV0dXJuIG5ldyBQKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmICghKGFyciAmJiB0eXBlb2YgYXJyLmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcpKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KFxuICAgICAgICBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIHR5cGVvZiBhcnIgK1xuICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgIGFyciArXG4gICAgICAgICAgICAnIGlzIG5vdCBpdGVyYWJsZShjYW5ub3QgcmVhZCBwcm9wZXJ0eSBTeW1ib2woU3ltYm9sLml0ZXJhdG9yKSknXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKTtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiByZXNvbHZlKFtdKTtcbiAgICB2YXIgcmVtYWluaW5nID0gYXJncy5sZW5ndGg7XG5cbiAgICBmdW5jdGlvbiByZXMoaSwgdmFsKSB7XG4gICAgICBpZiAodmFsICYmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB2YXIgdGhlbiA9IHZhbC50aGVuO1xuICAgICAgICBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGVuLmNhbGwoXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgcmVzKGksIHZhbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICBhcmdzW2ldID0geyBzdGF0dXM6ICdyZWplY3RlZCcsIHJlYXNvbjogZSB9O1xuICAgICAgICAgICAgICBpZiAoLS1yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFyZ3NbaV0gPSB7IHN0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWwgfTtcbiAgICAgIGlmICgtLXJlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzKGksIGFyZ3NbaV0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFsbFNldHRsZWQ7XG4iLCJpbXBvcnQgcHJvbWlzZUZpbmFsbHkgZnJvbSAnLi9maW5hbGx5JztcbmltcG9ydCBhbGxTZXR0bGVkIGZyb20gJy4vYWxsU2V0dGxlZCc7XG5cbi8vIFN0b3JlIHNldFRpbWVvdXQgcmVmZXJlbmNlIHNvIHByb21pc2UtcG9seWZpbGwgd2lsbCBiZSB1bmFmZmVjdGVkIGJ5XG4vLyBvdGhlciBjb2RlIG1vZGlmeWluZyBzZXRUaW1lb3V0IChsaWtlIHNpbm9uLnVzZUZha2VUaW1lcnMoKSlcbnZhciBzZXRUaW1lb3V0RnVuYyA9IHNldFRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGlzQXJyYXkoeCkge1xuICByZXR1cm4gQm9vbGVhbih4ICYmIHR5cGVvZiB4Lmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcpO1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuLy8gUG9seWZpbGwgZm9yIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gUHJvbWlzZShmbikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSkpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3Jyk7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIGZ1bmN0aW9uJyk7XG4gIC8qKiBAdHlwZSB7IW51bWJlcn0gKi9cbiAgdGhpcy5fc3RhdGUgPSAwO1xuICAvKiogQHR5cGUgeyFib29sZWFufSAqL1xuICB0aGlzLl9oYW5kbGVkID0gZmFsc2U7XG4gIC8qKiBAdHlwZSB7UHJvbWlzZXx1bmRlZmluZWR9ICovXG4gIHRoaXMuX3ZhbHVlID0gdW5kZWZpbmVkO1xuICAvKiogQHR5cGUgeyFBcnJheTwhRnVuY3Rpb24+fSAqL1xuICB0aGlzLl9kZWZlcnJlZHMgPSBbXTtcblxuICBkb1Jlc29sdmUoZm4sIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGUoc2VsZiwgZGVmZXJyZWQpIHtcbiAgd2hpbGUgKHNlbGYuX3N0YXRlID09PSAzKSB7XG4gICAgc2VsZiA9IHNlbGYuX3ZhbHVlO1xuICB9XG4gIGlmIChzZWxmLl9zdGF0ZSA9PT0gMCkge1xuICAgIHNlbGYuX2RlZmVycmVkcy5wdXNoKGRlZmVycmVkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgc2VsZi5faGFuZGxlZCA9IHRydWU7XG4gIFByb21pc2UuX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYiA9IHNlbGYuX3N0YXRlID09PSAxID8gZGVmZXJyZWQub25GdWxmaWxsZWQgOiBkZWZlcnJlZC5vblJlamVjdGVkO1xuICAgIGlmIChjYiA9PT0gbnVsbCkge1xuICAgICAgKHNlbGYuX3N0YXRlID09PSAxID8gcmVzb2x2ZSA6IHJlamVjdCkoZGVmZXJyZWQucHJvbWlzZSwgc2VsZi5fdmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmV0O1xuICAgIHRyeSB7XG4gICAgICByZXQgPSBjYihzZWxmLl92YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmVqZWN0KGRlZmVycmVkLnByb21pc2UsIGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXNvbHZlKGRlZmVycmVkLnByb21pc2UsIHJldCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlKHNlbGYsIG5ld1ZhbHVlKSB7XG4gIHRyeSB7XG4gICAgLy8gUHJvbWlzZSBSZXNvbHV0aW9uIFByb2NlZHVyZTogaHR0cHM6Ly9naXRodWIuY29tL3Byb21pc2VzLWFwbHVzL3Byb21pc2VzLXNwZWMjdGhlLXByb21pc2UtcmVzb2x1dGlvbi1wcm9jZWR1cmVcbiAgICBpZiAobmV3VmFsdWUgPT09IHNlbGYpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLicpO1xuICAgIGlmIChcbiAgICAgIG5ld1ZhbHVlICYmXG4gICAgICAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgbmV3VmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgKSB7XG4gICAgICB2YXIgdGhlbiA9IG5ld1ZhbHVlLnRoZW47XG4gICAgICBpZiAobmV3VmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHNlbGYuX3N0YXRlID0gMztcbiAgICAgICAgc2VsZi5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgZmluYWxlKHNlbGYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRvUmVzb2x2ZShiaW5kKHRoZW4sIG5ld1ZhbHVlKSwgc2VsZik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5fc3RhdGUgPSAxO1xuICAgIHNlbGYuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgZmluYWxlKHNlbGYpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVqZWN0KHNlbGYsIGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlamVjdChzZWxmLCBuZXdWYWx1ZSkge1xuICBzZWxmLl9zdGF0ZSA9IDI7XG4gIHNlbGYuX3ZhbHVlID0gbmV3VmFsdWU7XG4gIGZpbmFsZShzZWxmKTtcbn1cblxuZnVuY3Rpb24gZmluYWxlKHNlbGYpIHtcbiAgaWYgKHNlbGYuX3N0YXRlID09PSAyICYmIHNlbGYuX2RlZmVycmVkcy5sZW5ndGggPT09IDApIHtcbiAgICBQcm9taXNlLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpIHtcbiAgICAgIGlmICghc2VsZi5faGFuZGxlZCkge1xuICAgICAgICBQcm9taXNlLl91bmhhbmRsZWRSZWplY3Rpb25GbihzZWxmLl92YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2VsZi5fZGVmZXJyZWRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaGFuZGxlKHNlbGYsIHNlbGYuX2RlZmVycmVkc1tpXSk7XG4gIH1cbiAgc2VsZi5fZGVmZXJyZWRzID0gbnVsbDtcbn1cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvbWlzZSkge1xuICB0aGlzLm9uRnVsZmlsbGVkID0gdHlwZW9mIG9uRnVsZmlsbGVkID09PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiBudWxsO1xuICB0aGlzLm9uUmVqZWN0ZWQgPSB0eXBlb2Ygb25SZWplY3RlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uUmVqZWN0ZWQgOiBudWxsO1xuICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xufVxuXG4vKipcbiAqIFRha2UgYSBwb3RlbnRpYWxseSBtaXNiZWhhdmluZyByZXNvbHZlciBmdW5jdGlvbiBhbmQgbWFrZSBzdXJlXG4gKiBvbkZ1bGZpbGxlZCBhbmQgb25SZWplY3RlZCBhcmUgb25seSBjYWxsZWQgb25jZS5cbiAqXG4gKiBNYWtlcyBubyBndWFyYW50ZWVzIGFib3V0IGFzeW5jaHJvbnkuXG4gKi9cbmZ1bmN0aW9uIGRvUmVzb2x2ZShmbiwgc2VsZikge1xuICB2YXIgZG9uZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIGZuKFxuICAgICAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIHJlc29sdmUoc2VsZiwgdmFsdWUpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgcmVqZWN0KHNlbGYsIHJlYXNvbik7XG4gICAgICB9XG4gICAgKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgIGRvbmUgPSB0cnVlO1xuICAgIHJlamVjdChzZWxmLCBleCk7XG4gIH1cbn1cblxuUHJvbWlzZS5wcm90b3R5cGVbJ2NhdGNoJ10gPSBmdW5jdGlvbihvblJlamVjdGVkKSB7XG4gIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3RlZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgLy8gQHRzLWlnbm9yZVxuICB2YXIgcHJvbSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGhhbmRsZSh0aGlzLCBuZXcgSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvbSkpO1xuICByZXR1cm4gcHJvbTtcbn07XG5cblByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10gPSBwcm9taXNlRmluYWxseTtcblxuUHJvbWlzZS5hbGwgPSBmdW5jdGlvbihhcnIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmICghaXNBcnJheShhcnIpKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UuYWxsIGFjY2VwdHMgYW4gYXJyYXknKSk7XG4gICAgfVxuXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc29sdmUoW10pO1xuICAgIHZhciByZW1haW5pbmcgPSBhcmdzLmxlbmd0aDtcblxuICAgIGZ1bmN0aW9uIHJlcyhpLCB2YWwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh2YWwgJiYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgdmFyIHRoZW4gPSB2YWwudGhlbjtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChcbiAgICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgICBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICByZXMoaSwgdmFsKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcmVqZWN0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcmdzW2ldID0gdmFsO1xuICAgICAgICBpZiAoLS1yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICByZWplY3QoZXgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzKGksIGFyZ3NbaV0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5Qcm9taXNlLmFsbFNldHRsZWQgPSBhbGxTZXR0bGVkO1xuXG5Qcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gUHJvbWlzZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yZWplY3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVqZWN0KHZhbHVlKTtcbiAgfSk7XG59O1xuXG5Qcm9taXNlLnJhY2UgPSBmdW5jdGlvbihhcnIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmICghaXNBcnJheShhcnIpKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UucmFjZSBhY2NlcHRzIGFuIGFycmF5JykpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZShhcnJbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9XG4gIH0pO1xufTtcblxuLy8gVXNlIHBvbHlmaWxsIGZvciBzZXRJbW1lZGlhdGUgZm9yIHBlcmZvcm1hbmNlIGdhaW5zXG5Qcm9taXNlLl9pbW1lZGlhdGVGbiA9XG4gIC8vIEB0cy1pZ25vcmVcbiAgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICBmdW5jdGlvbihmbikge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgc2V0SW1tZWRpYXRlKGZuKTtcbiAgICB9KSB8fFxuICBmdW5jdGlvbihmbikge1xuICAgIHNldFRpbWVvdXRGdW5jKGZuLCAwKTtcbiAgfTtcblxuUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbiBfdW5oYW5kbGVkUmVqZWN0aW9uRm4oZXJyKSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZSkge1xuICAgIGNvbnNvbGUud2FybignUG9zc2libGUgVW5oYW5kbGVkIFByb21pc2UgUmVqZWN0aW9uOicsIGVycik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9taXNlO1xuIiwiaW1wb3J0IFByb21pc2UgZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgcHJvbWlzZUZpbmFsbHkgZnJvbSAnLi9maW5hbGx5JztcbmltcG9ydCBhbGxTZXR0bGVkIGZyb20gJy4vYWxsU2V0dGxlZCc7XG5cbi8qKiBAc3VwcHJlc3Mge3VuZGVmaW5lZFZhcnN9ICovXG52YXIgZ2xvYmFsTlMgPSAoZnVuY3Rpb24oKSB7XG4gIC8vIHRoZSBvbmx5IHJlbGlhYmxlIG1lYW5zIHRvIGdldCB0aGUgZ2xvYmFsIG9iamVjdCBpc1xuICAvLyBgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKWBcbiAgLy8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QnKTtcbn0pKCk7XG5cbi8vIEV4cG9zZSB0aGUgcG9seWZpbGwgaWYgUHJvbWlzZSBpcyB1bmRlZmluZWQgb3Igc2V0IHRvIGFcbi8vIG5vbi1mdW5jdGlvbiB2YWx1ZS4gVGhlIGxhdHRlciBjYW4gYmUgZHVlIHRvIGEgbmFtZWQgSFRNTEVsZW1lbnRcbi8vIGJlaW5nIGV4cG9zZWQgYnkgYnJvd3NlcnMgZm9yIGxlZ2FjeSByZWFzb25zLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RheWxvcmhha2VzL3Byb21pc2UtcG9seWZpbGwvaXNzdWVzLzExNFxuaWYgKHR5cGVvZiBnbG9iYWxOU1snUHJvbWlzZSddICE9PSAnZnVuY3Rpb24nKSB7XG4gIGdsb2JhbE5TWydQcm9taXNlJ10gPSBQcm9taXNlO1xufSBlbHNlIHtcbiAgaWYgKCFnbG9iYWxOUy5Qcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddKSB7XG4gICAgZ2xvYmFsTlMuUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSA9IHByb21pc2VGaW5hbGx5O1xuICB9IFxuICBpZiAoIWdsb2JhbE5TLlByb21pc2UuYWxsU2V0dGxlZCkge1xuICAgIGdsb2JhbE5TLlByb21pc2UuYWxsU2V0dGxlZCA9IGFsbFNldHRsZWQ7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBlbGVtZW50cyA9IHtcbiAgICBsYW5ndWFnZVNlbGVjdG9yOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJ0ei1sYW5ndWFnZScpLFxuICAgIHNpdGVOYW1lOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2l0ZS1uYW1lJyksXG59IiwiaW1wb3J0IHt0ZXh0cyBhcyB0ZXh0c0ZyfSBmcm9tIFwiLi90cmFuc2xhdGlvbnMvZnJcIjtcbmltcG9ydCB7dGV4dHMgYXMgdGV4dHNFbn0gZnJvbSBcIi4vdHJhbnNsYXRpb25zL2VuXCI7XG5pbXBvcnQge2VsZW1lbnRzIGFzIGhlYWRlckVsZW1lbnRzfSBmcm9tIFwiLi4vaGVhZGVyL2RvbVwiO1xuXG5jb25zdCBsb2NhbGVzTWFwcGluZzoge1tpbmRleDpzdHJpbmddOiBhbnl9ID0ge1xuICAgICdmcic6IHRleHRzRnIsXG4gICAgJ2VuJzogdGV4dHNFblxufVxuXG5leHBvcnQgY29uc3Qgc2V0UGFnZUxhbmd1YWdlID0gKGxhbmc6IHN0cmluZz0oPEhUTUxTZWxlY3RFbGVtZW50PmhlYWRlckVsZW1lbnRzLmxhbmd1YWdlU2VsZWN0b3IpLnZhbHVlKSA9PiB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcgPSBsYW5nO1xufVxuXG5leHBvcnQgY29uc3QgbG9hZFRleHRzID0gKGxhbmc6IHN0cmluZz0oPEhUTUxTZWxlY3RFbGVtZW50PmhlYWRlckVsZW1lbnRzLmxhbmd1YWdlU2VsZWN0b3IpLnZhbHVlKSA9PiB7XG4gICAgbGV0IGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncHJ0ei1pMThuJyk7XG4gICAgQXJyYXkuZnJvbShlbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGxvY2FsZXNNYXBwaW5nW2xhbmddW2VsZW1lbnQuaWQuc3BsaXQoJ2kxOG4tJylbMV1dO1xuICAgIH0pO1xufSIsImV4cG9ydCBjb25zdCB0ZXh0cyA9IHtcbiAgICBcImNyZWF0ZS1saXN0XCI6IFwibm91dmVsbGUgbGlzdGVcIixcbiAgICBcIm9wZW4tbGlzdFwiOiBcImNoYXJnZXIgdW5lIGxpc3RlXCIsXG4gICAgXCJzaXRlLXNsb2dhblwiOiBcIsOpdGFibGlyIGRlcyBwcmlvcml0w6lzIHNpbXBsZW1lbnRcIixcbiAgICBcImhlbHBcIjogXCJhaWRlXCIsXG4gICAgXCJjb21wdXRlLWxpc3RcIjogXCJjb21tZW5jZXJcIixcbiAgICBcIm5ldy1saXN0LXRpcC0xXCI6IFwiZW50cmV6IGxlcyDDqWzDqW1lbnRzIMOgIHByaW9yaXNlciBjaS1kZXNzdXMgKHVuIMOpbMOpbWVudCBwYXIgbGlnbmUpIDpcIixcbiAgICBcImNvbmZpcm1cIjogXCJjb25maXJtZXJcIixcbiAgICBcImNhbmNlbFwiOiBcImFubnVsZXJcIixcbiAgICBcImxpc3Qtb3BlbmVkXCI6IFwidW5lIGxpc3RlIGVzdCBlbiBjb3VycyBkZSBjYWxjdWwuIFNpIHZvdXMgcXVpdHRleiBtYWludGVuYW50LCB2b3VzIHBlcmRyZXogY2V0dGUgbGlzdGUuIFBlcmRyZSBsYSBsaXN0ZSA/XCIsXG4gICAgXCJjb21wdXRlLWxpc3QtdGlwXCI6IFwiY2hvaXNpc3NleiBsJ8OpbMOpbWVudCBsZSBwbHVzIGltcG9ydGFudCBkZXMgZGV1eCA6XCIsXG4gICAgXCJjb21wdXRlLWxpc3QtcmVzdWx0XCI6IFwidm9pY2kgdm90cmUgbGlzdGUgdHJpw6llIDpcIixcbiAgICBcInJlYWwtdGltZVwiOiBcInRlbXBzIHLDqWVsXCIsXG4gICAgXCJlc3RpbWF0ZWQtdGltZVwiOiBcInRlbXBzIGVzdGltw6lcIixcbiAgICBcInRpbWUtbGVmdFwiOiBcInRlbXBzIHJlc3RhbnRcIixcbn0iLCJleHBvcnQgY29uc3QgdGV4dHMgPSB7XG4gICAgXCJjcmVhdGUtbGlzdFwiOiBcIm5ldyBsaXN0XCIsXG4gICAgXCJvcGVuLWxpc3RcIjogXCJsb2FkIGxpc3RcIixcbiAgICBcInNpdGUtc2xvZ2FuXCI6IFwic2ltcGx5IHByaW9yaXRpemVcIixcbiAgICBcImhlbHBcIjogXCJoZWxwXCIsXG4gICAgXCJjb21wdXRlLWxpc3RcIjogXCJzdGFydFwiLFxuICAgIFwibmV3LWxpc3QtdGlwLTFcIjogXCJFbnRlciBpdGVtcyB0byBwcmlvcml0aXplIGJlbG93IChvbmUgaXRlbSBwZXIgbGluZSk6XCIsXG4gICAgXCJjb25maXJtXCI6IFwiY29uZmlybVwiLFxuICAgIFwiY2FuY2VsXCI6IFwiY2FuY2VsXCIsXG4gICAgXCJsaXN0LW9wZW5lZFwiOiBcImEgbGlzdCBpcyBjdXJyZW50IGNvbXB1dGluZy4gSWYgeW91IHF1aXQgbm93LCB5b3Ugd2lsbCBsb3N0IHRoaXMgbGlzdC4gRG8geW91IHJlYWxseSB3YW50IHRvIHF1aXQ/XCIsXG4gICAgXCJjb21wdXRlLWxpc3QtdGlwXCI6IFwiY2hvb3NlIHRoZSBtb3N0IGltcG9ydGFudCBpdGVtOlwiLFxuICAgIFwiY29tcHV0ZS1saXN0LXJlc3VsdFwiOiBcImhlcmUgaXMgeW91ciBzb3J0ZWQgbGlzdDpcIixcbiAgICBcInJlYWwtdGltZVwiOiBcInJlYWwgdGltZVwiLFxuICAgIFwiZXN0aW1hdGVkLXRpbWVcIjogXCJlc3RpbWF0ZWQgdGltZVwiLFxuICAgIFwidGltZS1sZWZ0XCI6IFwidGltZSBsZWZ0XCIsXG59IiwiZXhwb3J0IGNvbnN0IGVsZW1lbnRzID0ge1xuICAgIG5ld0xpc3Q6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV3LWxpc3RcIiksXG4gICAgYnRuQ29tcHV0ZUxpc3Q6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuLWNvbXB1dGUtbGlzdFwiKVxufSIsImltcG9ydCB7ZWxlbWVudHMgYXMgZWxlbWVudHNIZWFkZXJ9IGZyb20gXCIuLi9oZWFkZXIvZG9tXCI7XG5pbXBvcnQge2VsZW1lbnRzIGFzIGVsZW1lbnRzTmV3TGlzdH0gZnJvbSBcIi4uL25ld0xpc3QvZG9tXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRBbGxQYWlycyA9IChhcnJheTogc3RyaW5nW10pID0+IHtcblxuICAgIHJldHVybiBhcnJheS5mbGF0TWFwKCh4KSA9PiB7XG4gICAgICAgIHJldHVybiBhcnJheS5mbGF0TWFwKCh5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHggIT0geSkgPyBbW3gsIHldXSA6IFtdXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnQgY29uc3QgdG9UaW1lID0gKHNlY29uZHM6IGFueSkgPT4ge1xuICAgIGxldCBkYXRlID0gbmV3IERhdGUobnVsbCk7XG4gICAgZGF0ZS5zZXRTZWNvbmRzKHNlY29uZHMpO1xuICAgIGxldCByZXN1bHQgPSBkYXRlLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDExLCAxOSkuc3BsaXQoJzonKTtcbiAgICByZXR1cm4gcmVzdWx0WzBdICsgJ2ggJyArIHJlc3VsdFsxXSArIFwibW4gXCIgKyByZXN1bHRbMl0gKyBcInNcIjtcbn1cblxuZXhwb3J0IGNvbnN0IGFycmF5Tm90SW5JbkFycmF5ID0gKGFycjogW3N0cmluZywgc3RyaW5nXVtdLCBpdGVtOiBbc3RyaW5nLCBzdHJpbmddKSA9PiB7XG4gICAgbGV0IGl0ZW1fYXNfc3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoaXRlbSk7XG4gICAgbGV0IGFycmF5X2FzX3N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGFycik7XG5cbiAgICByZXR1cm4gKGFycmF5X2FzX3N0cmluZy5pbmRleE9mKGl0ZW1fYXNfc3RyaW5nKSA9PSAtMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogcmFuZ2Uoc3RhcnQ6IG51bWJlciA9IDAsIGVuZDogbnVtYmVyID0gbnVsbCwgc3RlcDogbnVtYmVyID0gMSkge1xuICAgIGlmIChlbmQgPT0gbnVsbCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBzdGVwKSB7XG4gICAgICAgIHlpZWxkIGk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2hvd1NjcmVlbiA9IChzY3JlZW46IHN0cmluZykgPT4ge1xuICAgIGxldCBzY3JlZW5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKltpZF49XCJzY3JlZW4tXCJdJyk7XG4gICAgc2NyZWVucy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIGlmIChcInNjcmVlbi1cIiArIHNjcmVlbiA9PSBlbGVtZW50LmlkKSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGUtZWxlbWVudCcpKSBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUtZWxlbWVudCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnaGlkZS1lbGVtZW50JykpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlkZS1lbGVtZW50Jyk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgIGVsZW1lbnRzSGVhZGVyLnNpdGVOYW1lLmRhdGFzZXQuY3VycmVudCA9IHNjcmVlbjtcbn1cblxuZXhwb3J0IGNvbnN0IGluaXROZXdMaXN0ID0gKCkgPT4ge1xuICAgICg8SFRNTFRleHRBcmVhRWxlbWVudD5lbGVtZW50c05ld0xpc3QubmV3TGlzdCkudmFsdWUgPSBcIlwiO1xufSIsImV4cG9ydCBjb25zdCBjcmVhdGVEaXYgPSAoaWQ6IHN0cmluZyA9IG51bGwsIGNsYXNzZXM6IHN0cmluZ1tdID0gbnVsbCwgc3R5bGVzOiBzdHJpbmcgPSBudWxsLCBkYXRhc2V0OiB7IFtpbmRleDogc3RyaW5nXTogc3RyaW5nIH0gPSBudWxsLCBpbm5lckhUTUw6IHN0cmluZyA9IG51bGwsIGlubmVyVHh0OiBzdHJpbmcgPSBudWxsLCBjb250ZW50RWRpdGFibGU6IHN0cmluZyA9IG51bGwsIG5vZGU6IEhUTUxFbGVtZW50ID0gbnVsbCkgPT4ge1xuICAgIGxldCBkaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgaWYgKGlkICE9PSBudWxsKSB7XG4gICAgICAgIGRpdi5pZCA9IGlkXG4gICAgfVxuICAgIGlmIChjbGFzc2VzICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGMgb2YgY2xhc3Nlcykge1xuICAgICAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoYyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0eWxlcyAhPT0gbnVsbCkge1xuICAgICAgICBkaXYuc3R5bGUuY3NzVGV4dCA9IHN0eWxlcztcbiAgICB9XG4gICAgaWYgKGRhdGFzZXQgIT09IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgZCBpbiBkYXRhc2V0KSB7XG4gICAgICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdkYXRhLScgKyBkLCBkYXRhc2V0W2RdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5uZXJIVE1MICE9PSBudWxsKSB7XG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgfVxuICAgIGlmIChpbm5lckhUTUwgIT09IG51bGwpIHtcbiAgICAgICAgZGl2LmlubmVySFRNTCA9IGlubmVySFRNTDtcbiAgICB9XG4gICAgaWYgKGlubmVyVHh0ICE9PSBudWxsKSB7XG4gICAgICAgIGRpdi5pbm5lclRleHQgPSBpbm5lclR4dDtcbiAgICB9XG4gICAgaWYgKGNvbnRlbnRFZGl0YWJsZSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChjb250ZW50RWRpdGFibGUgPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgIGRpdi5jb250ZW50RWRpdGFibGUgPSBcInRydWVcIjtcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZW50RWRpdGFibGUgPT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgICBkaXYuY29udGVudEVkaXRhYmxlID0gXCJmYWxzZVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRpdjtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUJ1dHRvbiA9IChpZDogc3RyaW5nID0gbnVsbCwgY2xhc3Nlczogc3RyaW5nW10gPSBudWxsLCBzdHlsZXM6IHN0cmluZyA9IG51bGwsIGRhdGFzZXQ6IHsgW2luZGV4OiBzdHJpbmddOiBzdHJpbmcgfSA9IG51bGwsIHRpdGxlOiBzdHJpbmcgPSBudWxsLCBpbm5lckhUTUw6IHN0cmluZyA9IG51bGwsIGlubmVyVHh0OiBzdHJpbmcgPSBudWxsLCBub2RlOiBIVE1MRWxlbWVudCA9IG51bGwpID0+IHtcbiAgICBsZXQgYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGlmIChpZCAhPT0gbnVsbCkge1xuICAgICAgICBidXR0b24uaWQgPSBpZFxuICAgIH1cbiAgICBpZiAoY2xhc3NlcyAhPT0gbnVsbCkge1xuICAgICAgICBmb3IgKGxldCBjIG9mIGNsYXNzZXMpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKGMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzdHlsZXMgIT09IG51bGwpIHtcbiAgICAgICAgYnV0dG9uLnN0eWxlLmNzc1RleHQgPSBzdHlsZXM7XG4gICAgfVxuICAgIGlmIChkYXRhc2V0ICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGQgaW4gZGF0YXNldCkge1xuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS0nICsgZCwgZGF0YXNldFtkXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpdGxlICE9PSBudWxsKSB7XG4gICAgICAgIGJ1dHRvbi50aXRsZSA9IHRpdGxlO1xuICAgIH1cbiAgICBpZiAoaW5uZXJIVE1MICE9PSBudWxsKSB7XG4gICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgfVxuICAgIGlmIChpbm5lckhUTUwgIT09IG51bGwpIHtcbiAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGlubmVySFRNTDtcbiAgICB9XG4gICAgaWYgKGlubmVyVHh0ICE9PSBudWxsKSB7XG4gICAgICAgIGJ1dHRvbi5pbm5lclRleHQgPSBpbm5lclR4dDtcbiAgICB9XG4gICAgaWYgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgYnV0dG9uLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gYnV0dG9uO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlUGFyYWdyYXBoID0gKGlkOiBzdHJpbmcgPSBudWxsLCBjbGFzc2VzOiBzdHJpbmdbXSA9IG51bGwsIHN0eWxlczogc3RyaW5nID0gbnVsbCwgZGF0YXNldDogeyBbaW5kZXg6IHN0cmluZ106IHN0cmluZyB9ID0gbnVsbCwgaW5uZXJIVE1MOiBzdHJpbmcgPSBudWxsLCBpbm5lclR4dDogc3RyaW5nID0gbnVsbCwgbm9kZTogSFRNTEVsZW1lbnQgPSBudWxsKSA9PiB7XG4gICAgbGV0IHA6IEhUTUxQYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGlmIChpZCAhPT0gbnVsbCkge1xuICAgICAgICBwLmlkID0gaWRcbiAgICB9XG4gICAgaWYgKGNsYXNzZXMgIT09IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgYyBvZiBjbGFzc2VzKSB7XG4gICAgICAgICAgICBwLmNsYXNzTGlzdC5hZGQoYyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0eWxlcyAhPT0gbnVsbCkge1xuICAgICAgICBwLnN0eWxlLmNzc1RleHQgPSBzdHlsZXM7XG4gICAgfVxuICAgIGlmIChkYXRhc2V0ICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGQgaW4gZGF0YXNldCkge1xuICAgICAgICAgICAgcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGQsIGRhdGFzZXRbZF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpbm5lckhUTUwgIT09IG51bGwpIHtcbiAgICAgICAgcC5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgfVxuICAgIGlmIChpbm5lckhUTUwgIT09IG51bGwpIHtcbiAgICAgICAgcC5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgfVxuICAgIGlmIChpbm5lclR4dCAhPT0gbnVsbCkge1xuICAgICAgICBwLmlubmVyVGV4dCA9IGlubmVyVHh0O1xuICAgIH1cbiAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBwLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNwYW4gPSAoaWQ6IHN0cmluZyA9IG51bGwsIGNsYXNzZXM6IHN0cmluZ1tdID0gbnVsbCwgc3R5bGVzOiBzdHJpbmcgPSBudWxsLCBkYXRhc2V0OiB7IFtpbmRleDogc3RyaW5nXTogc3RyaW5nIH0gPSBudWxsLCBpbm5lckhUTUw6IHN0cmluZyA9IG51bGwsIGlubmVyVHh0OiBzdHJpbmcgPSBudWxsLCBub2RlOiBIVE1MRWxlbWVudCA9IG51bGwpID0+IHtcbiAgICBsZXQgc3BhbjogSFRNTFNwYW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGlmIChpZCAhPT0gbnVsbCkge1xuICAgICAgICBzcGFuLmlkID0gaWRcbiAgICB9XG4gICAgaWYgKGNsYXNzZXMgIT09IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgYyBvZiBjbGFzc2VzKSB7XG4gICAgICAgICAgICBzcGFuLmNsYXNzTGlzdC5hZGQoYyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0eWxlcyAhPT0gbnVsbCkge1xuICAgICAgICBzcGFuLnN0eWxlLmNzc1RleHQgPSBzdHlsZXM7XG4gICAgfVxuICAgIGlmIChkYXRhc2V0ICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGQgaW4gZGF0YXNldCkge1xuICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGQsIGRhdGFzZXRbZF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpbm5lckhUTUwgIT09IG51bGwpIHtcbiAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgfVxuICAgIGlmIChpbm5lckhUTUwgIT09IG51bGwpIHtcbiAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgfVxuICAgIGlmIChpbm5lclR4dCAhPT0gbnVsbCkge1xuICAgICAgICBzcGFuLmlubmVyVGV4dCA9IGlubmVyVHh0O1xuICAgIH1cbiAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBzcGFuLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3Bhbjtcbn0iLCJleHBvcnQgY29uc3QgZWxlbWVudHMgPSB7XG4gICAgbW9kYWxUZXh0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vZGFsLXRleHRcIiksXG4gICAgbW9kYWxCdG5PazogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsLWJ0bi1vaycpLFxuICAgIG1vZGFsQnRuQ2FuY2VsOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWwtYnRuLWNhbmNlbCcpLFxuICAgIHNjcmVlbk1vZGFsOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NyZWVuLW1vZGFsJylcbn0iLCJpbXBvcnQge3Nob3dTY3JlZW59IGZyb20gXCIuLi9jb21tb25zL3V0aWxzXCI7XG5pbXBvcnQge2NyZWF0ZVNwYW59IGZyb20gXCIuLi9jb21tb25zL2RvbVwiO1xuaW1wb3J0IHtlbGVtZW50cyBhcyBlbGVtZW50c01vZGFsfSBmcm9tIFwiLi9kb21cIjtcbmltcG9ydCB7bG9hZFRleHRzfSBmcm9tIFwiLi4vbGFuZy9tYWluXCI7XG5cbmV4cG9ydCBjbGFzcyBNYWluIHtcbiAgICB2YWxpZGF0aW9uVmFsdWU6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlSWQ6IHN0cmluZykge1xuICAgICAgICBzaG93U2NyZWVuKCdtb2RhbCcpO1xuICAgICAgICB0aGlzLnZhbGlkYXRpb25WYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMubG9hZFRleHQobWVzc2FnZUlkKTtcbiAgICB9XG5cbiAgICBsb2FkVGV4dCA9IChtZXNzYWdlSWQ6IHN0cmluZykgPT4ge1xuICAgICAgICBsZXQgaW5zZXJ0VGV4dCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnRzTW9kYWwubW9kYWxUZXh0LmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgICBsZXQgc3BhbiA9IGNyZWF0ZVNwYW4oXCJpMThuLVwiICsgbWVzc2FnZUlkLCBbJ3BydHotaTE4biddKTtcbiAgICAgICAgICAgIGVsZW1lbnRzTW9kYWwubW9kYWxUZXh0LmFwcGVuZENoaWxkKHNwYW4pO1xuICAgICAgICAgICAgcmVzb2x2ZShcIlRleHQgaW5zZXJ0ZWQuXCIpO1xuICAgICAgICAgICAgcmVqZWN0KFwiVGV4dCBub3QgaW5zZXJ0ZWQuXCIpO1xuICAgICAgICB9KVxuXG4gICAgICAgIGluc2VydFRleHQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBsb2FkVGV4dHMoKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lckJ0bnMoKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBldmVudExpc3RlbmVyQnRucyA9ICgpID0+IHtcbiAgICAgICAgZWxlbWVudHNNb2RhbC5tb2RhbEJ0bk9rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy52YWxpZGF0aW9uLCB7b25jZTogdHJ1ZX0pXG4gICAgICAgIGVsZW1lbnRzTW9kYWwubW9kYWxCdG5DYW5jZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNhbmNlbCwge29uY2U6IHRydWV9KVxuICAgIH1cblxuICAgIHZhbGlkYXRpb24gPSAoKSA9PiB7XG4gICAgICAgIGVsZW1lbnRzTW9kYWwubW9kYWxCdG5DYW5jZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNhbmNlbCk7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvblZhbHVlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjYW5jZWwgPSAoKSA9PiB7XG4gICAgICAgIGVsZW1lbnRzTW9kYWwubW9kYWxCdG5Pay5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2FuY2VsKTtcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uVmFsdWUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB3YWl0Q2xpY2soKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIGxldCBjaGVja1Jlc3BvbnNlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52YWxpZGF0aW9uVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tSZXNwb25zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNNb2RhbC5zY3JlZW5Nb2RhbC5jbGFzc0xpc3QuYWRkKCdoaWRlLWVsZW1lbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy52YWxpZGF0aW9uVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrUmVzcG9uc2UoKTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbn0iLCJpbXBvcnQge2VsZW1lbnRzIGFzIGhlYWRlckVsZW1lbnRzfSBmcm9tIFwiLi9kb21cIjtcbmltcG9ydCB7bG9hZFRleHRzLCBzZXRQYWdlTGFuZ3VhZ2V9IGZyb20gXCIuLi9sYW5nL21haW5cIjtcbmltcG9ydCB7c2hvd1NjcmVlbiwgaW5pdE5ld0xpc3R9IGZyb20gXCIuLi9jb21tb25zL3V0aWxzXCI7XG5pbXBvcnQge01haW4gYXMgTW9kYWx9IGZyb20gXCIuLi9tb2RhbC9tYWluXCI7XG5cbmV4cG9ydCBjbGFzcyBNYWluIHtcbiAgICB2YWxpZGF0aW9uUmVzdWx0OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lckxhbmd1YWdlU2VsZWN0b3IoKTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyU2l0ZU5hbWUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBhc2tDb25maXJtYXRpb24oaGVhZGVyVGhpczogYW55KSB7XG4gICAgICAgIGxldCBtb2RhbCA9IG5ldyBNb2RhbChcImxpc3Qtb3BlbmVkXCIpO1xuICAgICAgICBoZWFkZXJUaGlzLnZhbGlkYXRpb25SZXN1bHQgPSBhd2FpdCBtb2RhbC53YWl0Q2xpY2soKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvblJlc3VsdDtcbiAgICB9XG5cbiAgICBldmVudExpc3RlbmVyU2l0ZU5hbWUoKSB7XG4gICAgICAgIGhlYWRlckVsZW1lbnRzLnNpdGVOYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEhlYWRpbmdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5kYXRhc2V0LmN1cnJlbnQgPT0gXCJjb21wdXRlLWxpc3RcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFza0NvbmZpcm1hdGlvbih0aGlzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXROZXdMaXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy52YWxpZGF0aW9uUmVzdWx0KSA/IHNob3dTY3JlZW4oJ2hvbWUnKSA6IHNob3dTY3JlZW4oJ2NvbXB1dGUtbGlzdCcpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5kYXRhc2V0LmN1cnJlbnQgPT0gXCJuZXctbGlzdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXROZXdMaXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHNob3dTY3JlZW4oJ2hvbWUnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaG93U2NyZWVuKCdob21lJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGV2ZW50TGlzdGVuZXJMYW5ndWFnZVNlbGVjdG9yKCkge1xuICAgICAgICBoZWFkZXJFbGVtZW50cy5sYW5ndWFnZVNlbGVjdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNldFBhZ2VMYW5ndWFnZSgoPEhUTUxTZWxlY3RFbGVtZW50PnRoaXMpLnZhbHVlKTtcbiAgICAgICAgICAgIGxvYWRUZXh0cygoPEhUTUxTZWxlY3RFbGVtZW50PnRoaXMpLnZhbHVlKTtcbiAgICAgICAgfSlcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IGVsZW1lbnRzID0ge1xuICAgIGJ0bkNyZWF0ZUxpc3Q6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuLWNyZWF0ZS1saXN0XCIpLFxuICAgIGJ0bkxvYWRMaXN0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bi1sb2FkLWxpc3RcIiksXG4gICAgYnRuSGVscDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG4taGVscFwiKSxcbiAgICBzY3JlZW5Ib21lOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNjcmVlbi1ob21lXCIpLFxuICAgIHNjcmVlbkNvbXB1dGVMaXN0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNjcmVlbi1jb21wdXRlLWxpc3RcIiksXG4gICAgc2NyZWVuTmV3TGlzdDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NjcmVlbi1uZXctbGlzdCcpXG59IiwiaW1wb3J0IHtlbGVtZW50c30gZnJvbSBcIi4vZG9tXCI7XG5pbXBvcnQge3Nob3dTY3JlZW59IGZyb20gXCIuLi9jb21tb25zL3V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBNYWluIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJOZXdMaXN0KCk7XG4gICAgfVxuXG4gICAgZXZlbnRMaXN0ZW5lck5ld0xpc3QgPSAoKSA9PiB7XG4gICAgICAgIGVsZW1lbnRzLmJ0bkNyZWF0ZUxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBzaG93U2NyZWVuKCduZXctbGlzdCcpO1xuICAgICAgICB9KVxuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgZWxlbWVudHMgPSB7XG4gICAgY29tYmluYXRpb25zOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbWJpbmF0aW9uc1wiKSxcbiAgICB0aW1lTGVmdDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWUtbGVmdCcpLFxuICAgIHByb2dyZXNzQmFyOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZ3Jlc3MnKSxcbiAgICBjb21wdXRlTGlzdFRpcDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbXB1dGUtbGlzdC10aXAnKSxcbiAgICBjb21wdXRlTGlzdFJlc3VsdDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbXB1dGUtbGlzdC1yZXN1bHQnKSxcbn0iLCJpbXBvcnQge2VsZW1lbnRzIGFzIGVsZW1lbnRzQ29tcHV0ZUxpc3R9IGZyb20gXCIuL2RvbVwiO1xuaW1wb3J0IHtjcmVhdGVCdXR0b24sIGNyZWF0ZURpdiwgY3JlYXRlUGFyYWdyYXBoLCBjcmVhdGVTcGFufSBmcm9tIFwiLi4vY29tbW9ucy9kb21cIjtcbmltcG9ydCB7Z2V0QWxsUGFpcnMsIGFycmF5Tm90SW5JbkFycmF5LCB0b1RpbWUsIHJhbmdlfSBmcm9tIFwiLi4vY29tbW9ucy91dGlsc1wiO1xuaW1wb3J0IHtsb2FkVGV4dHN9IGZyb20gXCIuLi9sYW5nL21haW5cIjtcblxuZXhwb3J0IGNsYXNzIE1haW4ge1xuICAgIGxpc3Q6IHsgW2luZGV4OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgICBxdWVzdGlvblN0ZXA6IG51bWJlcjtcbiAgICBxdWVzdGlvbkl0ZXI6IG51bWJlcjtcbiAgICBjb3VwbGVzVG9Db21wdXRlOiBhbnlbXTtcbiAgICBwYWlyc0NvbXB1dGVkOiBzdHJpbmdbXTtcbiAgICBwYWlyc1RyYW5zaXRpdml0eUFwcGxpZWQ6IHN0cmluZ1tdO1xuICAgIHBhaXJTZXF1ZW5jZXM6IFtzdHJpbmcsIHN0cmluZ11bXTtcbiAgICBmaW5hbFNlcXVlbmNlczogYW55W107XG4gICAgdGltZWxlZnQ6IHN0cmluZztcbiAgICBhbGxQYWlyczogc3RyaW5nW107XG4gICAgcmVzdWx0czogeyBbaW5kZXg6IHN0cmluZ106IG51bWJlciB9O1xuICAgIGxvb3NlcnM6IHN0cmluZ1tdO1xuICAgIGVzdGltYXRlZFNlY29uZHM6IG51bWJlcjtcbiAgICBzdGFydERhdGU6IGFueTtcbiAgICBmaXJzdENvbXB1dGluZzogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGxpc3Q6IHt9KSB7XG4gICAgICAgIHRoaXMubGlzdCA9IGxpc3Q7XG4gICAgICAgIHRoaXMucGFpcnNDb21wdXRlZCA9IFtdO1xuICAgICAgICB0aGlzLnBhaXJzVHJhbnNpdGl2aXR5QXBwbGllZCA9IFtdO1xuICAgICAgICB0aGlzLmNvdXBsZXNUb0NvbXB1dGUgPSBbXTtcbiAgICAgICAgdGhpcy5wYWlyU2VxdWVuY2VzID0gW107XG4gICAgICAgIHRoaXMuZmluYWxTZXF1ZW5jZXMgPSBbXTtcbiAgICAgICAgdGhpcy5hbGxQYWlycyA9IFtdO1xuICAgICAgICB0aGlzLnF1ZXN0aW9uU3RlcCA9IDE7XG4gICAgICAgIHRoaXMucXVlc3Rpb25JdGVyID0gMTtcbiAgICAgICAgdGhpcy5yZXN1bHRzID0ge307XG4gICAgICAgIHRoaXMubG9vc2VycyA9IFtdO1xuICAgICAgICB0aGlzLmVzdGltYXRlZFNlY29uZHMgPSAwO1xuICAgICAgICB0aGlzLmZpcnN0Q29tcHV0aW5nID0gdHJ1ZTtcbiAgICAgICAgZWxlbWVudHNDb21wdXRlTGlzdC50aW1lTGVmdC5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH1cblxuICAgIGxhdW5jaCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUFsbFBhaXJzKCk7XG4gICAgICAgIHRoaXMuaW5pdFF1ZXN0aW9ucygpO1xuICAgIH1cblxuICAgIGdlbmVyYXRlQWxsUGFpcnMoKSB7XG4gICAgICAgIGxldCBjb21iaW5hdGlvbnMgPSBnZXRBbGxQYWlycyhPYmplY3Qua2V5cyh0aGlzLmxpc3QpKTtcbiAgICAgICAgZm9yIChsZXQgcGFpciBvZiBjb21iaW5hdGlvbnMpIHtcbiAgICAgICAgICAgIGxldCBrZXkgPSBwYWlyLmpvaW4oJ18nKTtcbiAgICAgICAgICAgIHRoaXMuYWxsUGFpcnMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcHV0ZUNvdXBsZXMgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuY291cGxlc1RvQ29tcHV0ZSA9IFtdO1xuICAgICAgICBsZXQgZmlyc3ROdW1iZXIgPSB0aGlzLnF1ZXN0aW9uU3RlcDtcbiAgICAgICAgbGV0IHNlY29uZE51bWJlciA9IHRoaXMucXVlc3Rpb25TdGVwICsgdGhpcy5xdWVzdGlvbkl0ZXI7XG4gICAgICAgIGZvciAobGV0IG51bWJlciBvZiByYW5nZSh0aGlzLnF1ZXN0aW9uU3RlcCwgT2JqZWN0LmtleXModGhpcy5saXN0KS5sZW5ndGgsIHRoaXMucXVlc3Rpb25JdGVyKSkge1xuICAgICAgICAgICAgbGV0IGNvdXBsZSA9IFtmaXJzdE51bWJlciwgc2Vjb25kTnVtYmVyXTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhaXJzQ29tcHV0ZWQuaW5kZXhPZihjb3VwbGUuam9pbignXycpKSA9PSAtMSAmJiBzZWNvbmROdW1iZXIgPD0gT2JqZWN0LmtleXModGhpcy5saXN0KS5sZW5ndGgpIHRoaXMuY291cGxlc1RvQ29tcHV0ZS5wdXNoKGNvdXBsZSk7XG4gICAgICAgICAgICBmaXJzdE51bWJlciA9IHNlY29uZE51bWJlcjtcbiAgICAgICAgICAgIHNlY29uZE51bWJlciA9IHNlY29uZE51bWJlciArIHRoaXMucXVlc3Rpb25JdGVyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucXVlc3Rpb25JdGVyICs9IDE7XG4gICAgICAgIGlmICh0aGlzLmNvdXBsZXNUb0NvbXB1dGUubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVDb3VwbGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW5lcmF0ZUNvdXBsZXMgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnF1ZXN0aW9uU3RlcCArIHRoaXMucXVlc3Rpb25JdGVyIDw9IE9iamVjdC5rZXlzKHRoaXMubGlzdCkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVDb3VwbGVzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5xdWVzdGlvblN0ZXAgIT0gT2JqZWN0LmtleXModGhpcy5saXN0KS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWVzdGlvblN0ZXAgKz0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXN0aW9uSXRlciA9IDE7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21wdXRlQ291cGxlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdFByb2dyZXNzQmFyID0gKCkgPT4ge1xuICAgICAgICAoPEhUTUxQcm9ncmVzc0VsZW1lbnQ+ZWxlbWVudHNDb21wdXRlTGlzdC5wcm9ncmVzc0JhcikubWF4ID0gdGhpcy5hbGxQYWlycy5sZW5ndGggLyAyO1xuICAgIH1cblxuICAgIHNldFByb2dyZXNzVmFsdWUgPSAobGFzdDogYm9vbGVhbiA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICAoPEhUTUxQcm9ncmVzc0VsZW1lbnQ+ZWxlbWVudHNDb21wdXRlTGlzdC5wcm9ncmVzc0JhcikudmFsdWUgPSB0aGlzLmFsbFBhaXJzLmxlbmd0aCAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoPEhUTUxQcm9ncmVzc0VsZW1lbnQ+ZWxlbWVudHNDb21wdXRlTGlzdC5wcm9ncmVzc0JhcikudmFsdWUgPSB0aGlzLnBhaXJzQ29tcHV0ZWQubGVuZ3RoIC8gMjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRRdWVzdGlvbnMgPSAoKSA9PiB7XG4gICAgICAgIGxldCBnZW5lcmF0ZUNvdXBsZXMgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRlQ291cGxlcygpO1xuICAgICAgICAgICAgcmVzb2x2ZShcIkNvdXBsZXMgZ2VuZXJhdGVkLlwiKTtcbiAgICAgICAgICAgIHJlamVjdChcIkNvdXBsZXMgbm90IGdlbmVyYXRlZC5cIik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgZ2VuZXJhdGVDb3VwbGVzXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0UHJvZ3Jlc3NCYXIoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUJ1dHRvbnMoKTtcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgd3JpdGVCdXR0b25zID0gKCkgPT4ge1xuICAgICAgICBlbGVtZW50c0NvbXB1dGVMaXN0LmNvbWJpbmF0aW9ucy5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICBpZiAodGhpcy5jb3VwbGVzVG9Db21wdXRlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBpID0gMTtcbiAgICAgICAgICAgIGZvciAobGV0IGNvdXBsZSBvZiB0aGlzLmNvdXBsZXNUb0NvbXB1dGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2hvd0hpZGRlbkNsYXNzOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgKGkgPT0gMSkgPyBzaG93SGlkZGVuQ2xhc3MgPSAnc2hvdycgOiBzaG93SGlkZGVuQ2xhc3MgPSAnaGlkZGVuJztcbiAgICAgICAgICAgICAgICBsZXQgd3JhcHBlcklkID0gXCJidG4td3JhcHBlci1cIiArIGkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBsZXQgY291cGxlSWQgPSBjb3VwbGUuam9pbignXycpO1xuICAgICAgICAgICAgICAgIGxldCB0d2luSWQgPSBbY291cGxlWzFdLCBjb3VwbGVbMF1dLmpvaW4oJ18nKTtcbiAgICAgICAgICAgICAgICBsZXQgd3JhcHBlciA9IGNyZWF0ZURpdih3cmFwcGVySWQsIFtcImJ0bi13cmFwcGVyXCIsIFwiZC1mbGV4XCIsIFwiZmxleC1jb2x1bW5cIiwgc2hvd0hpZGRlbkNsYXNzXSk7XG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZXJCdG4xID0gY3JlYXRlRGl2KG51bGwsIFtcImQtZmxleFwiLCBcImp1c3RpZnktY29udGVudC1jZW50ZXJcIl0pO1xuICAgICAgICAgICAgICAgIGxldCB3cmFwcGVyQnRuMiA9IGNyZWF0ZURpdihudWxsLCBbXCJkLWZsZXhcIiwgXCJqdXN0aWZ5LWNvbnRlbnQtY2VudGVyXCJdKTtcbiAgICAgICAgICAgICAgICBsZXQgYnRuMSA9IGNyZWF0ZUJ1dHRvbihudWxsLCBbJ2J0bicsICdidG4tcHJpbWFyeScsICdidG4xJ10sIG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBjb3VwbGVbMF0sXG4gICAgICAgICAgICAgICAgICAgIFwiY291cGxlXCI6IGNvdXBsZUlkLFxuICAgICAgICAgICAgICAgICAgICBcIml0ZXJcIjogaS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgfSwgbnVsbCwgbnVsbCwgdGhpcy5saXN0W2NvdXBsZVswXV0pO1xuICAgICAgICAgICAgICAgIGxldCBidG4yID0gY3JlYXRlQnV0dG9uKG51bGwsIFsnYnRuJywgJ2J0bi1wcmltYXJ5JywgJ2J0bjInXSwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBcImlkXCI6IGNvdXBsZVsxXSxcbiAgICAgICAgICAgICAgICAgICAgXCJjb3VwbGVcIjogY291cGxlSWQsXG4gICAgICAgICAgICAgICAgICAgIFwiaXRlclwiOiBpLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICB9LCBudWxsLCBudWxsLCB0aGlzLmxpc3RbY291cGxlWzFdXSk7XG5cbiAgICAgICAgICAgICAgICBidG4xLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXB1dGVDaG9pY2VBbmRMb2FkTmV4dChidG4xKTtcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgYnRuMi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wdXRlQ2hvaWNlQW5kTG9hZE5leHQoYnRuMik7XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIHdyYXBwZXJCdG4xLmFwcGVuZENoaWxkKGJ0bjEpO1xuICAgICAgICAgICAgICAgIHdyYXBwZXJCdG4yLmFwcGVuZENoaWxkKGJ0bjIpO1xuICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQod3JhcHBlckJ0bjEpO1xuICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQod3JhcHBlckJ0bjIpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzQ29tcHV0ZUxpc3QuY29tYmluYXRpb25zLmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbFBhaXJzLmZpbHRlcihuID0+ICF0aGlzLnBhaXJzQ29tcHV0ZWQuaW5jbHVkZXMobikpLmxlbmd0aCAvIDIgPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZVByaW9yaXRpZXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIklsIG5lIGRldnJhaXQgcGFzIHJlc3RlciBkZXMgcGFpcmVzIG5vbiBjYWxjdWzDqWVzLiBPciwgaWwgZW4gcmVzdGVcIiwgdGhpcy5hbGxQYWlycy5maWx0ZXIobiA9PiAhdGhpcy5wYWlyc0NvbXB1dGVkLmluY2x1ZGVzKG4pKS5sZW5ndGggLyAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXB1dGVBbmRXcml0ZVRpbWVMZWZ0ID0gKCkgPT4ge1xuICAgICAgICBsZXQgY29tcHV0ZVRpbWVMZWZ0ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlVGltZUxlZnQoKTtcbiAgICAgICAgICAgIHJlc29sdmUoXCJDb3VwbGVzIGdlbmVyYXRlZC5cIik7XG4gICAgICAgICAgICByZWplY3QoXCJDb3VwbGVzIG5vdCBnZW5lcmF0ZWQuXCIpO1xuICAgICAgICB9KVxuXG4gICAgICAgIGNvbXB1dGVUaW1lTGVmdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVUaW1lTGVmdCgpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbXB1dGVUaW1lTGVmdCA9ICgpID0+IHtcbiAgICAgICAgLy8gVG9kbzogcmVtcGxhY2VyIGxlIGluY2x1ZGVzIHBhciBpbmRleG9mIDogw6dhIG5lIGZvbmN0aW9ubmUgcGFzIHNvdXMgSUUuXG4gICAgICAgIGxldCBjb3VwbGVzTGVmdFNpemUgPSB0aGlzLmFsbFBhaXJzLmZpbHRlcihuID0+ICF0aGlzLnBhaXJzQ29tcHV0ZWQuaW5jbHVkZXMobikpLmxlbmd0aCAvIDI7XG4gICAgICAgIGxldCBzZWNvbmRzID0gY291cGxlc0xlZnRTaXplICogNTtcbiAgICAgICAgaWYgKHRoaXMuZmlyc3RDb21wdXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnREYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuZXN0aW1hdGVkU2Vjb25kcyA9IHNlY29uZHM7XG4gICAgICAgICAgICB0aGlzLmZpcnN0Q29tcHV0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aW1lbGVmdCA9IHRvVGltZShzZWNvbmRzKTtcbiAgICB9XG5cbiAgICB3cml0ZVRpbWVMZWZ0ID0gKGxhc3Q6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xuICAgICAgICBsZXQgd3JpdGVUaW1lTGVmdCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGVuZERhdGU6IGFueSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgbGV0IHRpbWVEaWZmZXJlbmNlID0gZW5kRGF0ZSAtIHRoaXMuc3RhcnREYXRlO1xuICAgICAgICAgICAgICAgIHRpbWVEaWZmZXJlbmNlIC89IDEwMDBcbiAgICAgICAgICAgICAgICBlbGVtZW50c0NvbXB1dGVMaXN0LnRpbWVMZWZ0LmlubmVySFRNTCA9IFwiPHNwYW4gaWQ9J2kxOG4tcmVhbC10aW1lJyBjbGFzcz0ncHJ0ei1pMThuJyBzdHlsZT0nZm9udC13ZWlnaHQ6IGJvbGQnPjwvc3Bhbj48c3Bhbj4gOiBcIiArIHRvVGltZShNYXRoLnJvdW5kKHRpbWVEaWZmZXJlbmNlKSkgKyBcIjwvc3Bhbj48YnI+XCI7XG4gICAgICAgICAgICAgICAgZWxlbWVudHNDb21wdXRlTGlzdC50aW1lTGVmdC5pbm5lckhUTUwgKz0gXCI8c3BhbiBpZD0naTE4bi1lc3RpbWF0ZWQtdGltZScgY2xhc3M9J3BydHotaTE4bicgc3R5bGU9J2ZvbnQtd2VpZ2h0OiBib2xkJz48L3NwYW4+PHNwYW4+IDogXCIgKyB0b1RpbWUodGhpcy5lc3RpbWF0ZWRTZWNvbmRzKSArIFwiPC9zcGFuPlwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0NvbXB1dGVMaXN0LnRpbWVMZWZ0LmlubmVySFRNTCA9IFwiPHNwYW4gaWQ9J2kxOG4tdGltZS1sZWZ0JyBjbGFzcz0ncHJ0ei1pMThuJyBzdHlsZT0nZm9udC13ZWlnaHQ6IGJvbGQnPjwvc3Bhbj48c3Bhbj4gOiBcIiArIHRoaXMudGltZWxlZnQgKyBcIjwvc3Bhbj5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUoXCJUaW1lIGxlZnQgd3JpdHRlbi5cIik7XG4gICAgICAgICAgICByZWplY3QoXCJUaW1lIGxlZnQgbm90IHdyaXR0ZW4uXCIpO1xuICAgICAgICB9KVxuXG4gICAgICAgIHdyaXRlVGltZUxlZnRcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsb2FkVGV4dHMoKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICB9XG5cbiAgICBjb21wdXRlQ2hvaWNlQW5kTG9hZE5leHQgPSAoYnRuOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IHJlY29yZENob2ljZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxldCBjb3VwbGUgPSBidG4uZGF0YXNldC5jb3VwbGUuc3BsaXQoJ18nKTtcbiAgICAgICAgICAgIGxldCB0d2luSWQgPSBbY291cGxlWzFdLCBjb3VwbGVbMF1dLmpvaW4oJ18nKTtcbiAgICAgICAgICAgIHRoaXMucmVjb3JkQ2hvaWNlKGJ0bi5kYXRhc2V0LmNvdXBsZSwgdHdpbklkLCBidG4uZGF0YXNldC5pZCk7XG4gICAgICAgICAgICByZXNvbHZlKFwiQ291cGxlcyBnZW5lcmF0ZWQuXCIpO1xuICAgICAgICAgICAgcmVqZWN0KFwiQ291cGxlcyBub3QgZ2VuZXJhdGVkLlwiKTtcbiAgICAgICAgfSlcblxuICAgICAgICByZWNvcmRDaG9pY2VcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAocGFyc2VJbnQoYnRuLmRhdGFzZXQuaXRlcikgPD0gdGhpcy5jb3VwbGVzVG9Db21wdXRlLmxlbmd0aCAtIDEpID8gdGhpcy5zaG93TmV4dENvdXBsZShidG4pIDogdGhpcy5jb21wdXRlQW5kTG9hZE5leHRTdGVwKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChidG4uZGF0YXNldC5pdGVyKSA8PSB0aGlzLmNvdXBsZXNUb0NvbXB1dGUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5VHJhbnNpdGl2aXR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoYnRuLmRhdGFzZXQuaXRlcikgPD0gdGhpcy5jb3VwbGVzVG9Db21wdXRlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQcm9ncmVzc1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoYnRuLmRhdGFzZXQuaXRlcikgPD0gdGhpcy5jb3VwbGVzVG9Db21wdXRlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wdXRlQW5kV3JpdGVUaW1lTGVmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVjb3JkQ2hvaWNlID0gKGNvdXBsZUlkOiBzdHJpbmcsIHR3aW5JZDogc3RyaW5nLCB3aW5uZXI6IHN0cmluZykgPT4ge1xuICAgICAgICBsZXQgYXJyYXlDb3VwbGUgPSBjb3VwbGVJZC5zcGxpdCgnXycpO1xuICAgICAgICAoYXJyYXlDb3VwbGVbMF0gPT0gd2lubmVyKSA/IHRoaXMucGFpclNlcXVlbmNlcy5wdXNoKFthcnJheUNvdXBsZVswXSwgYXJyYXlDb3VwbGVbMV1dKSA6IHRoaXMucGFpclNlcXVlbmNlcy5wdXNoKFthcnJheUNvdXBsZVsxXSwgYXJyYXlDb3VwbGVbMF1dKTtcbiAgICAgICAgaWYgKHRoaXMucGFpcnNDb21wdXRlZC5pbmRleE9mKGNvdXBsZUlkKSA9PSAtMSkgdGhpcy5wYWlyc0NvbXB1dGVkLnB1c2goY291cGxlSWQpO1xuICAgICAgICBpZiAodGhpcy5wYWlyc0NvbXB1dGVkLmluZGV4T2YodHdpbklkKSA9PSAtMSkgdGhpcy5wYWlyc0NvbXB1dGVkLnB1c2godHdpbklkKTtcbiAgICB9XG5cbiAgICBzaG93TmV4dENvdXBsZShidG46IGFueSkge1xuICAgICAgICBsZXQgY3VycmVudEl0ZXJhdGlvbiA9IHBhcnNlSW50KGJ0bi5kYXRhc2V0Lml0ZXIpO1xuICAgICAgICBsZXQgbmV4dEVsZW1lbnRJdGVyYXRpb24gPSBjdXJyZW50SXRlcmF0aW9uICsgMTtcbiAgICAgICAgbGV0IGN1cnJlbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG4td3JhcHBlci1cIiArIGN1cnJlbnRJdGVyYXRpb24udG9TdHJpbmcoKSk7XG4gICAgICAgIGxldCBuZXh0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuLXdyYXBwZXItXCIgKyBuZXh0RWxlbWVudEl0ZXJhdGlvbi50b1N0cmluZygpKTtcbiAgICAgICAgY3VycmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICAgICAgICBjdXJyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbiAgICB9XG5cbiAgICBjb21wdXRlQW5kTG9hZE5leHRTdGVwID0gKCkgPT4ge1xuICAgICAgICBsZXQgYXBwbHlUcmFuc2l0aXZpdHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5VHJhbnNpdGl2aXR5KCk7XG4gICAgICAgICAgICByZXNvbHZlKFwiQ291cGxlcyBnZW5lcmF0ZWQuXCIpO1xuICAgICAgICAgICAgcmVqZWN0KFwiQ291cGxlcyBub3QgZ2VuZXJhdGVkLlwiKTtcbiAgICAgICAgfSlcblxuICAgICAgICBhcHBseVRyYW5zaXRpdml0eS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdFF1ZXN0aW9ucygpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGhhc1RyYW5zaXRpdml0eSA9ICgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgY3VycmVudFNlcXVlbmNlIG9mIHRoaXMucGFpclNlcXVlbmNlcykge1xuICAgICAgICAgICAgZm9yIChsZXQgc2VxdWVuY2Ugb2YgdGhpcy5wYWlyU2VxdWVuY2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlICE9IGN1cnJlbnRTZXF1ZW5jZSAmJiBjdXJyZW50U2VxdWVuY2VbMV0gPT0gc2VxdWVuY2VbMF0gJiYgYXJyYXlOb3RJbkluQXJyYXkodGhpcy5wYWlyU2VxdWVuY2VzLCBbY3VycmVudFNlcXVlbmNlWzBdLCBzZXF1ZW5jZVsxXV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29tcHV0ZVRyYW5zaXRpdmVFbGVtZW50cyA9IChjdXJyZW50U2VxdWVuY2U6IHN0cmluZ1tdKSA9PiB7XG4gICAgICAgIGZvciAobGV0IHNlcXVlbmNlIG9mIHRoaXMucGFpclNlcXVlbmNlcykge1xuICAgICAgICAgICAgaWYgKHNlcXVlbmNlICE9IGN1cnJlbnRTZXF1ZW5jZSAmJiBjdXJyZW50U2VxdWVuY2VbMV0gPT0gc2VxdWVuY2VbMF0pIHtcbiAgICAgICAgICAgICAgICBsZXQgY291cGxlSWQgPSBjdXJyZW50U2VxdWVuY2VbMF0gKyBcIl9cIiArIHNlcXVlbmNlWzFdO1xuICAgICAgICAgICAgICAgIGxldCB0d2luSWQgPSBzZXF1ZW5jZVsxXSArIFwiX1wiICsgY3VycmVudFNlcXVlbmNlWzBdO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhaXJzQ29tcHV0ZWQuaW5kZXhPZihjb3VwbGVJZCkgPT0gLTEpIHRoaXMucGFpcnNDb21wdXRlZC5wdXNoKGNvdXBsZUlkKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYWlyc0NvbXB1dGVkLmluZGV4T2YodHdpbklkKSA9PSAtMSkgdGhpcy5wYWlyc0NvbXB1dGVkLnB1c2godHdpbklkKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXlOb3RJbkluQXJyYXkodGhpcy5wYWlyU2VxdWVuY2VzLCBbY3VycmVudFNlcXVlbmNlWzBdLCBzZXF1ZW5jZVsxXV0pKSB0aGlzLnBhaXJTZXF1ZW5jZXMucHVzaChbY3VycmVudFNlcXVlbmNlWzBdLCBzZXF1ZW5jZVsxXV0pO1xuICAgICAgICAgICAgICAgIC8vREVCVUcgY29uc29sZS5sb2coXCJ0cmFuc2l0aXZpdMOpIGFwcGxpY2FibGUgc3VyXCIsIGN1cnJlbnRTZXF1ZW5jZSwgXCJldFwiLCBzZXF1ZW5jZSwgXCJxdWkgZG9ubmVcIiwgY3VycmVudFNlcXVlbmNlWzBdLCBcIj5cIiwgc2VxdWVuY2VbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwbHlUcmFuc2l0aXZpdHkgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmhhc1RyYW5zaXRpdml0eSgpKSB7XG4gICAgICAgICAgICBsZXQgc2VxdWVuY2VzQ29weSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5wYWlyU2VxdWVuY2VzKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBzZXF1ZW5jZSBvZiBzZXF1ZW5jZXNDb3B5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21wdXRlVHJhbnNpdGl2ZUVsZW1lbnRzKHNlcXVlbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXBwbHlUcmFuc2l0aXZpdHkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXB1dGVQcmlvcml0aWVzID0gKCkgPT4ge1xuICAgICAgICBsZXQgc29ydFJlc3VsdHMgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNvcnRSZXN1bHRzKCk7XG4gICAgICAgICAgICByZXNvbHZlKFwiUmVzdWx0cyBzb3J0ZWQuXCIpO1xuICAgICAgICAgICAgcmVqZWN0KFwiUmVzdWx0cyBub3Qgc29ydGVkLlwiKTtcbiAgICAgICAgfSlcblxuICAgICAgICBzb3J0UmVzdWx0c1xuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0TG9vc2VycygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbWZvcnRMb29zZXIoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzRHVwbGljYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRmluYWxseSB0aGVyZSBpcyBkdXBsaWNhdGVzLiBGaXggaXQuXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGVSZXN1bHRzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBoYXNEdXBsaWNhdGUgPSAoKSA9PiB7XG4gICAgICAgIGxldCBzY29yZTogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcmVzdWx0IGluIHRoaXMucmVzdWx0cykge1xuICAgICAgICAgICAgaWYgKHNjb3JlLmluZGV4T2YodGhpcy5yZXN1bHRzW3Jlc3VsdF0pID09IC0xKSB7XG4gICAgICAgICAgICAgICAgc2NvcmUucHVzaCh0aGlzLnJlc3VsdHNbcmVzdWx0XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzb3J0UmVzdWx0cyA9ICgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgcGFpclNlcXVlbmNlIG9mIHRoaXMucGFpclNlcXVlbmNlcykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMucmVzdWx0cykuaW5kZXhPZihwYWlyU2VxdWVuY2VbMF0pID09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzW3BhaXJTZXF1ZW5jZVswXV0gPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdHNbcGFpclNlcXVlbmNlWzBdXSArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgd3JpdGVSZXN1bHRzID0gKCkgPT4ge1xuICAgICAgICBsZXQgc29ydGVkUmVzdWx0cyA9IE9iamVjdC5lbnRyaWVzKHRoaXMucmVzdWx0cykuc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pO1xuICAgICAgICBsZXQgaSA9IDE7XG4gICAgICAgIGVsZW1lbnRzQ29tcHV0ZUxpc3QuY29tYmluYXRpb25zLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGZvciAobGV0IGVsZW1lbnQgb2Ygc29ydGVkUmVzdWx0cykge1xuICAgICAgICAgICAgbGV0IHAgPSBjcmVhdGVQYXJhZ3JhcGgobnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgaS50b1N0cmluZygpICsgXCIgLSBcIiArIHRoaXMubGlzdFtlbGVtZW50WzBdLnRvU3RyaW5nKCldKTtcbiAgICAgICAgICAgIGVsZW1lbnRzQ29tcHV0ZUxpc3QuY29tYmluYXRpb25zLmFwcGVuZENoaWxkKHApO1xuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0UHJvZ3Jlc3NWYWx1ZSh0cnVlKTtcbiAgICAgICAgdGhpcy53cml0ZVRpbWVMZWZ0KHRydWUpO1xuICAgICAgICBlbGVtZW50c0NvbXB1dGVMaXN0LmNvbXB1dGVMaXN0VGlwLmNsYXNzTGlzdC5hZGQoJ2hpZGUtZWxlbWVudCcpO1xuICAgICAgICBlbGVtZW50c0NvbXB1dGVMaXN0LmNvbXB1dGVMaXN0UmVzdWx0LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUtZWxlbWVudCcpO1xuICAgIH1cblxuICAgIGNvbWZvcnRMb29zZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmxvb3NlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgbG9vc2VyIG9mIHRoaXMubG9vc2Vycykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0c1tsb29zZXJdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExvb3NlcnMgPSAoKSA9PiB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmxpc3QpLmxlbmd0aCA+IE9iamVjdC5rZXlzKHRoaXMucmVzdWx0cykubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5saXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMucmVzdWx0cykuaW5kZXhPZihrZXkpID09IC0xKSB0aGlzLmxvb3NlcnMucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59IiwiaW1wb3J0IHtlbGVtZW50cyBhcyBlbGVtZW50c05ld0xpc3R9IGZyb20gXCIuL2RvbVwiO1xuaW1wb3J0IHtNYWluIGFzIGNvbXB1dGVMaXN0fSBmcm9tIFwiLi4vY29tcHV0ZUxpc3QvbWFpblwiO1xuaW1wb3J0IHtzaG93U2NyZWVufSBmcm9tIFwiLi4vY29tbW9ucy91dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgTWFpbiB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgKDxIVE1MVGV4dEFyZWFFbGVtZW50PmVsZW1lbnRzTmV3TGlzdC5uZXdMaXN0KS52YWx1ZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lclRleHRhcmVhKCk7XG4gICAgfVxuXG4gICAgZXZlbnRMaXN0ZW5lck91dHNpZGVUZXh0YXJlYSA9IChldmVudDogYW55KSA9PiB7XG4gICAgICAgIGlmICghZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlVGV4dGFyZWEoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc2FibGVUZXh0YXJlYSA9ICgpID0+IHtcbiAgICAgICAgZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QuY2xhc3NMaXN0LmFkZCgnaW5hY3RpdmUnKTtcbiAgICAgICAgZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QuYmx1cigpO1xuICAgICAgICAoPEhUTUxUZXh0QXJlYUVsZW1lbnQ+ZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QpLnJlYWRPbmx5ID0gdHJ1ZTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5ldmVudExpc3RlbmVyT3V0c2lkZVRleHRhcmVhKTtcbiAgICB9XG5cbiAgICBldmVudExpc3RlbmVyVGV4dGFyZWEgPSAoKSA9PiB7XG4gICAgICAgIGVsZW1lbnRzTmV3TGlzdC5uZXdMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QuY2xhc3NMaXN0LmNvbnRhaW5zKCdpbmFjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QuY2xhc3NMaXN0LnJlbW92ZSgnaW5hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAoPEhUTUxUZXh0QXJlYUVsZW1lbnQ+ZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QpLnJlYWRPbmx5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5ldmVudExpc3RlbmVyT3V0c2lkZVRleHRhcmVhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlVGV4dGFyZWEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGxldCBsaW5lQnJlYWs7XG4gICAgICAgICAgICBsZXQgZW1wdHlMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAoPEhUTUxUZXh0QXJlYUVsZW1lbnQ+ZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QpLnZhbHVlO1xuICAgICAgICAgICAgbGV0IGxpbmVzID0gdmFsdWUuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBsaW5lcykge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtID09IFwiXCIpIGVtcHR5TGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAodmFsdWUuaW5kZXhPZignXFxuJykgIT0gLTEpID8gbGluZUJyZWFrID0gdHJ1ZSA6IGxpbmVCcmVhayA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAobGluZUJyZWFrICYmICFlbXB0eUxpbmUgJiYgbGluZXMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgICAgICAoPEhUTUxCdXR0b25FbGVtZW50PmVsZW1lbnRzTmV3TGlzdC5idG5Db21wdXRlTGlzdCkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAoPEhUTUxCdXR0b25FbGVtZW50PmVsZW1lbnRzTmV3TGlzdC5idG5Db21wdXRlTGlzdCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmV2ZW50TGlzdGVuZXJDb21wdXRlQnRuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgKDxIVE1MQnV0dG9uRWxlbWVudD5lbGVtZW50c05ld0xpc3QuYnRuQ29tcHV0ZUxpc3QpLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAoPEhUTUxCdXR0b25FbGVtZW50PmVsZW1lbnRzTmV3TGlzdC5idG5Db21wdXRlTGlzdCkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmV2ZW50TGlzdGVuZXJDb21wdXRlQnRuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGJ1aWxkTGlzdCA9ICgpID0+IHtcbiAgICAgICAgaWYgKCg8SFRNTFRleHRBcmVhRWxlbWVudD5lbGVtZW50c05ld0xpc3QubmV3TGlzdCkudmFsdWUuaW5kZXhPZignXFxuJykgIT0gLTEpIHtcbiAgICAgICAgICAgIGxldCBsaXN0QXJyYXkgPSAoPEhUTUxUZXh0QXJlYUVsZW1lbnQ+ZWxlbWVudHNOZXdMaXN0Lm5ld0xpc3QpLnZhbHVlLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6IHsgW2luZGV4OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICAgICAgICAgICAgbGV0IGkgPSAxO1xuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBsaXN0QXJyYXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpLnRvU3RyaW5nKCldID0gaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSWwgbid5IGEgcGFzIGRlIHNhdXQgZGUgbGlnbmUgZMOpdGVjdMOpICFcIilcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnRMaXN0ZW5lckNvbXB1dGVCdG4gPSAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICBzaG93U2NyZWVuKCdjb21wdXRlLWxpc3QnKTtcbiAgICAgICAgbGV0IGxpc3Q6IHsgW2luZGV4OiBzdHJpbmddOiBzdHJpbmcgfTtcblxuICAgICAgICBsZXQgYnVpbGRMaXN0ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGlzdCA9IHRoaXMuYnVpbGRMaXN0KCk7XG4gICAgICAgICAgICByZXNvbHZlKFwiTGlzdCBidWlsdC5cIik7XG4gICAgICAgICAgICByZWplY3QoXCJMaXN0IG5vdCBidWlsdC5cIik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgYnVpbGRMaXN0LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNsID0gbmV3IGNvbXB1dGVMaXN0KGxpc3QpO1xuICAgICAgICAgICAgY2wubGF1bmNoKCk7XG4gICAgICAgIH0pXG4gICAgfVxufSIsImltcG9ydCBcIi4vc2Nzcy9tYWluLnNjc3NcIjtcbmltcG9ydCBcIi4uL25vZGVfbW9kdWxlcy9wcm9taXNlLXBvbHlmaWxsL3NyYy9wb2x5ZmlsbFwiO1xuaW1wb3J0IHtNYWluIGFzIEhlYWRlcn0gZnJvbSBcIi4vdHlwZXNjcmlwdC9oZWFkZXIvbWFpblwiO1xuaW1wb3J0IHtNYWluIGFzIEhvbWV9IGZyb20gXCIuL3R5cGVzY3JpcHQvaG9tZS9tYWluXCI7XG5pbXBvcnQge01haW4gYXMgTmV3TGlzdH0gZnJvbSBcIi4vdHlwZXNjcmlwdC9uZXdMaXN0L21haW5cIjtcbmltcG9ydCB7bG9hZFRleHRzLCBzZXRQYWdlTGFuZ3VhZ2V9IGZyb20gXCIuL3R5cGVzY3JpcHQvbGFuZy9tYWluXCI7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoZXZlbnQpID0+IHtcbiAgICBsZXQgYXBwID0gbmV3IE1haW4oKTtcbiAgICBhcHAuc3RhcnQoKTtcbn0pO1xuXG5pbnRlcmZhY2UgTmF2aWdhdG9yIHtcbiAgdXNlckxhbmd1YWdlPzogc3RyaW5nO1xuICBicm93c2VyTGFuZ3VhZ2U/OiBzdHJpbmc7XG4gIGxhbmd1YWdlczogcmVhZG9ubHkgc3RyaW5nW107XG4gIGxhbmd1YWdlOiBzdHJpbmc7XG59XG5cbmNvbnN0IG5hdmlnYXRvcjogTmF2aWdhdG9yID0gd2luZG93Lm5hdmlnYXRvcjtcblxuY2xhc3MgTWFpbiB7XG4gICAgaG9tZTogYW55O1xuICAgIGhlYWRlcjogYW55O1xuICAgIHVzZXJMYW5ndWFnZTogYW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaGVhZGVyID0gbmV3IEhlYWRlcigpO1xuICAgICAgICB0aGlzLmhvbWUgPSBuZXcgSG9tZSgpO1xuICAgICAgICB0aGlzLnVzZXJMYW5ndWFnZSA9IG5hdmlnYXRvclsndXNlckxhbmd1YWdlJ10gfHwgd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy51c2VyTGFuZ3VhZ2UpO1xuICAgICAgICAvLyBUb2RvIDogw6AgcmViYXNjdWxlciBkYW5zIGwnZXZlbnQgbGlzdGVudGVyIGR1IGhvbWUgbWFpblxuICAgICAgICBuZXcgTmV3TGlzdCgpO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICBzZXRQYWdlTGFuZ3VhZ2UoKTtcbiAgICAgICAgbG9hZFRleHRzKCk7XG4gICAgfVxufSJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZyIsImdsb2JhbFRoaXMiLCJ0aGlzIiwiRnVuY3Rpb24iLCJlIiwid2luZG93IiwiY2FsbGJhY2siLCJjb25zdHJ1Y3RvciIsInRoZW4iLCJ2YWx1ZSIsInJlc29sdmUiLCJyZWFzb24iLCJyZWplY3QiLCJhcnIiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJyZW1haW5pbmciLCJyZXMiLCJpIiwidmFsIiwic3RhdHVzIiwic2V0VGltZW91dEZ1bmMiLCJzZXRUaW1lb3V0IiwiaXNBcnJheSIsIngiLCJCb29sZWFuIiwibm9vcCIsImZuIiwiX3N0YXRlIiwiX2hhbmRsZWQiLCJfdmFsdWUiLCJ1bmRlZmluZWQiLCJfZGVmZXJyZWRzIiwiZG9SZXNvbHZlIiwiaGFuZGxlIiwic2VsZiIsImRlZmVycmVkIiwiX2ltbWVkaWF0ZUZuIiwiY2IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJyZXQiLCJwcm9taXNlIiwicHVzaCIsIm5ld1ZhbHVlIiwiZmluYWxlIiwidGhpc0FyZyIsImFwcGx5IiwiYXJndW1lbnRzIiwiX3VuaGFuZGxlZFJlamVjdGlvbkZuIiwibGVuIiwiSGFuZGxlciIsImRvbmUiLCJleCIsInByb20iLCJhbGwiLCJhbGxTZXR0bGVkIiwicmFjZSIsInNldEltbWVkaWF0ZSIsImVyciIsImNvbnNvbGUiLCJ3YXJuIiwiZ2xvYmFsTlMiLCJFcnJvciIsIlByb21pc2UiLCJsYW5ndWFnZVNlbGVjdG9yIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNpdGVOYW1lIiwibG9jYWxlc01hcHBpbmciLCJzZXRQYWdlTGFuZ3VhZ2UiLCJsYW5nIiwiZG9jdW1lbnRFbGVtZW50IiwibG9hZFRleHRzIiwiZWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZnJvbSIsImZvckVhY2giLCJlbGVtZW50IiwiaW5uZXJIVE1MIiwiaWQiLCJzcGxpdCIsIm5ld0xpc3QiLCJidG5Db21wdXRlTGlzdCIsInRvVGltZSIsInNlY29uZHMiLCJkYXRlIiwiRGF0ZSIsInNldFNlY29uZHMiLCJyZXN1bHQiLCJ0b0lTT1N0cmluZyIsInN1YnN0cmluZyIsImFycmF5Tm90SW5JbkFycmF5IiwiaXRlbSIsIml0ZW1fYXNfc3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsImluZGV4T2YiLCJzaG93U2NyZWVuIiwic2NyZWVuIiwicXVlcnlTZWxlY3RvckFsbCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlIiwiYWRkIiwiaW5pdE5ld0xpc3QiLCJjcmVhdGVEaXYiLCJjbGFzc2VzIiwic3R5bGVzIiwiZGF0YXNldCIsImlubmVyVHh0IiwiY29udGVudEVkaXRhYmxlIiwibm9kZSIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJjIiwic3R5bGUiLCJjc3NUZXh0IiwiZCIsInNldEF0dHJpYnV0ZSIsImlubmVyVGV4dCIsImFwcGVuZENoaWxkIiwiY3JlYXRlQnV0dG9uIiwidGl0bGUiLCJidXR0b24iLCJjcmVhdGVQYXJhZ3JhcGgiLCJwIiwibW9kYWxUZXh0IiwibW9kYWxCdG5PayIsIm1vZGFsQnRuQ2FuY2VsIiwic2NyZWVuTW9kYWwiLCJtZXNzYWdlSWQiLCJsb2FkVGV4dCIsImluc2VydFRleHQiLCJzcGFuIiwiY3JlYXRlU3BhbiIsImV2ZW50TGlzdGVuZXJCdG5zIiwidmFsaWRhdGlvbiIsIm9uY2UiLCJjYW5jZWwiLCJ2YWxpZGF0aW9uVmFsdWUiLCJ3YWl0Q2xpY2siLCJjaGVja1Jlc3BvbnNlIiwiZXZlbnRMaXN0ZW5lckxhbmd1YWdlU2VsZWN0b3IiLCJldmVudExpc3RlbmVyU2l0ZU5hbWUiLCJhc2tDb25maXJtYXRpb24iLCJoZWFkZXJUaGlzIiwibW9kYWwiLCJ2YWxpZGF0aW9uUmVzdWx0IiwiZXZlbnQiLCJ0YXJnZXQiLCJIVE1MSGVhZGluZ0VsZW1lbnQiLCJjdXJyZW50IiwiYnRuQ3JlYXRlTGlzdCIsImJ0bkxvYWRMaXN0IiwiYnRuSGVscCIsInNjcmVlbkhvbWUiLCJzY3JlZW5Db21wdXRlTGlzdCIsInNjcmVlbk5ld0xpc3QiLCJldmVudExpc3RlbmVyTmV3TGlzdCIsImNvbWJpbmF0aW9ucyIsInRpbWVMZWZ0IiwicHJvZ3Jlc3NCYXIiLCJjb21wdXRlTGlzdFRpcCIsImNvbXB1dGVMaXN0UmVzdWx0IiwibGlzdCIsImxhdW5jaCIsImdlbmVyYXRlQWxsUGFpcnMiLCJpbml0UXVlc3Rpb25zIiwiY29tcHV0ZUNvdXBsZXMiLCJjb3VwbGVzVG9Db21wdXRlIiwiZmlyc3ROdW1iZXIiLCJxdWVzdGlvblN0ZXAiLCJzZWNvbmROdW1iZXIiLCJxdWVzdGlvbkl0ZXIiLCJzdGFydCIsImVuZCIsInN0ZXAiLCJyYW5nZSIsIk9iamVjdCIsImtleXMiLCJjb3VwbGUiLCJwYWlyc0NvbXB1dGVkIiwiam9pbiIsImdlbmVyYXRlQ291cGxlcyIsImluaXRQcm9ncmVzc0JhciIsImFsbFBhaXJzIiwic2V0UHJvZ3Jlc3NWYWx1ZSIsImxhc3QiLCJ3cml0ZUJ1dHRvbnMiLCJzaG93SGlkZGVuQ2xhc3MiLCJ3cmFwcGVySWQiLCJ0b1N0cmluZyIsImNvdXBsZUlkIiwid3JhcHBlciIsIndyYXBwZXJCdG4xIiwid3JhcHBlckJ0bjIiLCJidG4xIiwiYnRuMiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb21wdXRlQ2hvaWNlQW5kTG9hZE5leHQiLCJmaWx0ZXIiLCJuIiwiaW5jbHVkZXMiLCJjb21wdXRlUHJpb3JpdGllcyIsImVycm9yIiwiY29tcHV0ZUFuZFdyaXRlVGltZUxlZnQiLCJjb21wdXRlVGltZUxlZnQiLCJ3cml0ZVRpbWVMZWZ0IiwiZmlyc3RDb21wdXRpbmciLCJzdGFydERhdGUiLCJlc3RpbWF0ZWRTZWNvbmRzIiwidGltZWxlZnQiLCJ0aW1lRGlmZmVyZW5jZSIsIk1hdGgiLCJyb3VuZCIsImJ0biIsInJlY29yZENob2ljZSIsInR3aW5JZCIsInBhcnNlSW50IiwiaXRlciIsInNob3dOZXh0Q291cGxlIiwiY29tcHV0ZUFuZExvYWROZXh0U3RlcCIsImFwcGx5VHJhbnNpdGl2aXR5Iiwid2lubmVyIiwiYXJyYXlDb3VwbGUiLCJwYWlyU2VxdWVuY2VzIiwiaGFzVHJhbnNpdGl2aXR5IiwiY3VycmVudFNlcXVlbmNlIiwic2VxdWVuY2UiLCJjb21wdXRlVHJhbnNpdGl2ZUVsZW1lbnRzIiwic2VxdWVuY2VzQ29weSIsInBhcnNlIiwic29ydFJlc3VsdHMiLCJnZXRMb29zZXJzIiwiY29tZm9ydExvb3NlciIsImhhc0R1cGxpY2F0ZSIsIndyaXRlUmVzdWx0cyIsInNjb3JlIiwicmVzdWx0cyIsInBhaXJTZXF1ZW5jZSIsInNvcnRlZFJlc3VsdHMiLCJlbnRyaWVzIiwic29ydCIsImEiLCJiIiwibG9vc2VycyIsImxvb3NlciIsImtleSIsInBhaXJzVHJhbnNpdGl2aXR5QXBwbGllZCIsImZpbmFsU2VxdWVuY2VzIiwiYXJyYXkiLCJmbGF0TWFwIiwieSIsImN1cnJlbnRJdGVyYXRpb24iLCJuZXh0RWxlbWVudEl0ZXJhdGlvbiIsImN1cnJlbnRFbGVtZW50IiwibmV4dEVsZW1lbnQiLCJldmVudExpc3RlbmVyT3V0c2lkZVRleHRhcmVhIiwiZGlzYWJsZVRleHRhcmVhIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2ZW50TGlzdGVuZXJUZXh0YXJlYSIsImVtcHR5TGluZSIsImxpbmVzIiwiZXZlbnRMaXN0ZW5lckNvbXB1dGVCdG4iLCJidWlsZExpc3QiLCJsaXN0QXJyYXkiLCJNYWluIiwibmF2aWdhdG9yIiwiaGVhZGVyIiwiaG9tZSIsInVzZXJMYW5ndWFnZSIsImxhbmd1YWdlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==